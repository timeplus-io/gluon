basePath: /{workspace-id}/api
definitions:
  APIKey:
    properties:
      created_at:
        description: creation time represented as the number of seconds elapsed since
          January 1, 1970 UTC
        example: 1257894000
        type: integer
      expire_at:
        description: expiration time represented as the number of seconds elapsed
          since January 1, 1970 UTC
        example: 1257894000
        type: integer
      id:
        description: a string that identifies an API key, readonly.
        type: string
      name:
        description: the name of the API key
        example: myAPIKey (vthm****OjXG)
        type: string
      permissions:
        description: list of permissions associated with the API key
        example:
        - read:query
        - write:query
        items:
          type: string
        type: array
    type: object
  Alert:
    properties:
      action:
        type: string
      created_at:
        example: "2023-02-01 23:22:59"
        type: string
      created_by:
        $ref: '#/definitions/Owner'
      description:
        type: string
      id:
        type: string
      instance:
        $ref: '#/definitions/alert.Incident'
      last_updated_at:
        example: "2023-02-05 11:12:13"
        type: string
      last_updated_by:
        $ref: '#/definitions/Owner'
      message:
        type: string
      name:
        type: string
      properties:
        additionalProperties: {}
        type: object
      resolve_query:
        $ref: '#/definitions/Query'
      resolve_sql:
        type: string
      severity:
        type: integer
      status:
        example: running
        type: string
      trigger_query:
        $ref: '#/definitions/Query'
      trigger_sql:
        type: string
    required:
    - action
    - description
    - id
    - instance
    - message
    - name
    - properties
    - resolve_query
    - severity
    - status
    - trigger_query
    - trigger_sql
    type: object
  AnalyzeSQLRequest:
    properties:
      sql:
        type: string
    type: object
  BatchingPolicy:
    properties:
      count:
        description: The max result count per batch
        type: integer
      time_ms:
        description: The max interval per batch in milliseconds
        type: integer
    type: object
  Build:
    properties:
      build_time:
        example: "2023-09-05T14:06:20Z"
        type: string
      commit:
        example: 02b8e47e
        type: string
      version:
        example: v1.3.4
        type: string
    required:
    - build_time
    - commit
    - version
    type: object
  Column:
    properties:
      name:
        type: string
      type:
        type: string
    required:
    - name
    - type
    type: object
  ColumnDef:
    properties:
      codec:
        type: string
      default:
        type: string
      name:
        example: name
        type: string
      skipping_index_expression:
        type: string
      ttl_expression:
        type: string
      type:
        example: string
        type: string
    required:
    - name
    - type
    type: object
  ColumnsResp:
    properties:
      codec:
        example: CODEC(ZSTD(1))
        type: string
      default:
        type: string
      name:
        example: my_col
        type: string
      nullable:
        type: boolean
      type:
        example: int64
        type: string
    required:
    - name
    - type
    type: object
  CreateAPIKeyRequest:
    properties:
      expire_at:
        description: |-
          define the expiration time of the API key by specifying the exact date time,
          cannot use with expire_in
        example: 2022-06-07T12:00:00Z08:00
        format: RFC3339
        type: string
      expire_in:
        description: |-
          define the expiration time of the API key by specifying the amount of time to count from now,
          cannot use with expire_at
        example: 24h
        type: string
      name:
        description: |-
          the name of the API key.
          * If name is speicfied, the masked API key will be appended to the end of the name (e.g. `myAPIKey (vthm****OjXG)`).
          * If name is not speicfied, the masked API key will be used as the name (e.g. `vthm****OjXG`).
        example: myAPIKey
        type: string
    type: object
  CreateAPIKeyResponse:
    properties:
      api_key:
        description: |-
          generated API key. API keys are treated as secrets and are not stored in the system.
          It is the users' responsibility to safely store the API key for future use.
        example: vthm5o5ENm4TaX5RcixG+DB8q9ALQtrU3VlfQBVFv1lQauWeDXR87MI5kOjXG
        type: string
      created_at:
        description: creation time represented as the number of seconds elapsed since
          January 1, 1970 UTC
        example: 1257894000
        type: integer
      expire_at:
        description: expiration time represented as the number of seconds elapsed
          since January 1, 1970 UTC
        example: 1257894000
        type: integer
      id:
        description: a string that identifies an API key, readonly.
        type: string
      name:
        description: the name of the API key
        example: myAPIKey (vthm****OjXG)
        type: string
      permissions:
        description: list of permissions associated with the API key
        example:
        - read:query
        - write:query
        items:
          type: string
        type: array
    type: object
  CreateAlertRequest:
    properties:
      action:
        description: |-
          Sink template - the following properties are used to create the sink
          One action can be map to a sink
        type: string
      description:
        type: string
      name:
        type: string
      properties:
        additionalProperties: {}
        description: Detailed properties to create the sink
        type: object
      resolve_sql:
        type: string
      severity:
        type: integer
      trigger_sql:
        description: Persistent query template - the following properties are used
          to create the persistent query
        type: string
    required:
    - action
    - name
    - severity
    - trigger_sql
    type: object
  CreateDashboardRequest:
    properties:
      description:
        type: string
      name:
        type: string
      panels:
        items:
          $ref: '#/definitions/dashboard.Panel'
        type: array
    required:
    - name
    type: object
  CreateQueryRequestV1Beta2:
    properties:
      batching_policy:
        $ref: '#/definitions/BatchingPolicy'
        description: Controls how often a batch of results will be flushed via SSE
          channel
      description:
        type: string
      name:
        type: string
      sql:
        type: string
      tags:
        items:
          type: string
        type: array
    required:
    - sql
    type: object
  CreateSavedQueryRequest:
    properties:
      description:
        type: string
      name:
        type: string
      sql:
        type: string
      tags:
        items:
          type: string
        type: array
    required:
    - name
    - sql
    type: object
  CreateSinkRequest:
    properties:
      description:
        example: write data to kafka
        type: string
      name:
        description: Sink name should only contain a maximum of 64 letters, numbers,
          or _, and start with a letter
        example: write_to_kafka
        type: string
      properties:
        additionalProperties: {}
        description: Additional properties that required to write the data to the
          sink (e.g. broker url). Please refer to the documentation for this sink
          type
        type: object
      query:
        example: select * from car_live_data where speed_kmh > 100
        type: string
      type:
        description: |-
          Available types: [`slack`, `http`, `kafka`, `redpanda`, `confluent_cloud`, `pulsar`, `timeplus`].
          Additional configurations such as broker url and etc. should be passed through `properties`
        example: kafka
        type: string
    required:
    - name
    - query
    - type
    type: object
  CreateSourceRequest:
    properties:
      description:
        example: read from my kafka topic
        type: string
      name:
        description: Source name should only contain a maximum of 64 letters, numbers,
          or _, and start with a letter
        example: my_kafka_source
        type: string
      properties:
        additionalProperties: {}
        description: Additional properties that required to read the data from source
          (e.g. broker url). Please refer to the documentation for this source type
        type: object
      stream:
        description: The name of the target stream that this source writes to. The
          stream needs to be created first.
        example: kafak_stream
        type: string
      type:
        description: |-
          Available types: [`ably`, `stream_generator`, `kafka`, `redpanda`, `confluent_cloud`, `pulsar`, `websocket`, `nats`, `nats_jetstream`].
          Additional configurations such as broker url and etc. should be passed through `properties`
        example: kafka
        type: string
    required:
    - name
    - stream
    - type
    type: object
  CreateViewRequest:
    properties:
      description:
        example: the description of my_test_view
        type: string
      logstore_retention_bytes:
        description: The max size a stream can grow. Any non-positive value means
          unlimited size. Defaulted to 10 GiB.
        example: 10737418240
        type: integer
      logstore_retention_ms:
        description: The max time the data can be retained in the stream. Any non-positive
          value means unlimited time. Defaulted to 7 days.
        example: 604800000
        type: integer
      materialized:
        default: false
        type: boolean
      name:
        description: View name should only contain a maximum of 64 letters, numbers,
          or _, and start with a letter
        example: my_test_view
        type: string
      query:
        example: select * from car_live_data where speed_kmh > 100
        type: string
      target_stream:
        description: |-
          This option is applicable only when `materialized` is `true`. Specify this when you want to have multiple
          materialized views sink to the same target stream.
        type: string
      ttl_expression:
        example: to_datetime(_tp_time) + INTERVAL 28 DAY
        type: string
    required:
    - name
    - query
    type: object
  Customer:
    properties:
      email:
        example: bob@email.com
        type: string
      name:
        example: Bob
        type: string
    required:
    - email
    - name
    type: object
  Edge:
    properties:
      source:
        type: string
      target:
        type: string
    type: object
  ErrorResponse:
    properties:
      code:
        example: 57
        type: integer
      message:
        example: stream 'iot' exists
        type: string
      system:
        enum:
        - proton
        - neutron
        - orbit
        example: proton
        type: string
    required:
    - code
    - message
    - system
    type: object
  Event:
    additionalProperties: {}
    type: object
  EventInferRequest:
    properties:
      event:
        $ref: '#/definitions/Event'
        description: The event to be inferred
    required:
    - event
    type: object
  EventInferResponse:
    properties:
      inferred_columns:
        items:
          $ref: '#/definitions/ColumnDef'
        type: array
      recommeneded_columns:
        items:
          $ref: '#/definitions/ColumnDef'
        type: array
    required:
    - inferred_columns
    - recommeneded_columns
    type: object
  ExecuteQueryRequest:
    properties:
      sql:
        type: string
    required:
    - sql
    type: object
  ExternalStream:
    properties:
      columns:
        items:
          $ref: '#/definitions/ColumnsResp'
        type: array
      created_at:
        example: "2023-02-01 23:22:59"
        type: string
      created_by:
        $ref: '#/definitions/Owner'
      description:
        example: my test stream
        type: string
      last_updated_at:
        example: "2023-02-05 11:12:13"
        type: string
      last_updated_by:
        $ref: '#/definitions/Owner'
      name:
        example: test_external_stream
        type: string
      settings:
        items:
          $ref: '#/definitions/StreamSetting'
        type: array
    required:
    - description
    - name
    type: object
  ExternalStreamDef:
    properties:
      columns:
        items:
          $ref: '#/definitions/ColumnDef'
        type: array
      description:
        example: a sample kafka external stream
        type: string
      name:
        example: external_kafka
        type: string
      settings:
        items:
          $ref: '#/definitions/StreamSetting'
        type: array
    required:
    - columns
    - name
    - settings
    type: object
  ExternalTable:
    properties:
      created_at:
        example: "2023-02-01 23:22:59"
        type: string
      created_by:
        $ref: '#/definitions/Owner'
      description:
        example: my test stream
        type: string
      last_updated_at:
        example: "2023-02-05 11:12:13"
        type: string
      last_updated_by:
        $ref: '#/definitions/Owner'
      name:
        example: test_external_stream
        type: string
      settings:
        items:
          $ref: '#/definitions/StreamSetting'
        type: array
    required:
    - description
    - name
    type: object
  ExternalTableDef:
    properties:
      description:
        example: a sample kafka external stream
        type: string
      name:
        example: external_kafka
        type: string
      settings:
        items:
          $ref: '#/definitions/StreamSetting'
        type: array
    required:
    - name
    - settings
    type: object
  FormatQueryRequest:
    properties:
      sql:
        type: string
    type: object
  FormatQueryResponse:
    properties:
      sql:
        type: string
    type: object
  GlobalMetricsResult:
    properties:
      sink_throughput:
        type: number
      source_throughput:
        type: number
      storage:
        type: integer
    required:
    - sink_throughput
    - source_throughput
    - storage
    type: object
  Graph:
    properties:
      edges:
        items:
          $ref: '#/definitions/Edge'
        type: array
      nodes:
        items:
          $ref: '#/definitions/Node'
        type: array
    type: object
  Info:
    properties:
      axion:
        $ref: '#/definitions/Build'
      neutron:
        $ref: '#/definitions/Build'
      orbit:
        $ref: '#/definitions/Build'
      product_name:
        type: string
      proton:
        $ref: '#/definitions/Build'
    required:
    - axion
    - neutron
    - orbit
    - product_name
    - proton
    type: object
  IngestData:
    properties:
      columns:
        items:
          type: string
        type: array
      data:
        items:
          items: {}
          type: array
        type: array
    required:
    - columns
    - data
    type: object
  Invitation:
    properties:
      created_at:
        example: "2023-02-01 23:22:59"
        type: string
      created_by:
        $ref: '#/definitions/Owner'
      email:
        description: The email address of the invited user.
        example: bob@example.com
        type: string
      id:
        example: test_id
        type: string
      last_updated_at:
        example: "2023-02-05 11:12:13"
        type: string
      last_updated_by:
        $ref: '#/definitions/Owner'
      status:
        enum:
        - pending
        - accepted
        example: pending
        type: string
      user_id:
        description: The user id of the invited user. It is empty when the `status`
          is `pending`.
        example: user_id
        type: string
    required:
    - email
    - id
    - status
    - user_id
    type: object
  InvitationRequest:
    properties:
      email:
        type: string
    required:
    - email
    type: object
  Node:
    properties:
      id:
        type: string
      name:
        type: string
      ownership:
        $ref: '#/definitions/Owner'
      properties:
        additionalProperties: {}
        type: object
      type:
        type: string
    type: object
  Owner:
    properties:
      id:
        example: bob-id
        type: string
      name:
        example: Bob
        type: string
    type: object
  Payment:
    properties:
      created:
        type: integer
      status:
        type: string
      types:
        items:
          type: string
        type: array
    type: object
  Query:
    properties:
      analysis:
        $ref: '#/definitions/SQLAnalyzeResult'
      created_at:
        example: "2023-02-01 23:22:59"
        type: string
      created_by:
        $ref: '#/definitions/Owner'
      description:
        description: deprecated
        example: ad-hoc streaming query
        type: string
      duration:
        example: 10
        type: integer
      end_time:
        example: 1689809152
        type: integer
      id:
        example: UUID
        type: string
      last_updated_at:
        example: "2023-02-05 11:12:13"
        type: string
      last_updated_by:
        $ref: '#/definitions/Owner'
      message:
        type: string
      name:
        description: deprecated
        example: test_query
        type: string
      response_time:
        example: 1
        type: integer
      result:
        $ref: '#/definitions/QueryResult'
      sinks:
        additionalProperties:
          $ref: '#/definitions/SinkStat'
        description: deprecated
        type: object
      sql:
        example: select * from iot
        type: string
      start_time:
        example: 1689809142
        type: integer
      status:
        enum:
        - running
        - finished
        - canceled
        - failed
        example: running
        type: string
      tags:
        items:
          type: string
        type: array
      timeColumns:
        $ref: '#/definitions/TimeColumns'
    required:
    - analysis
    - description
    - duration
    - end_time
    - id
    - message
    - name
    - response_time
    - result
    - sql
    - start_time
    - status
    - timeColumns
    type: object
  QueryPipeline:
    properties:
      edges:
        items:
          $ref: '#/definitions/QueryPipelineEdge'
        type: array
      nodes:
        items:
          $ref: '#/definitions/QueryPipelineNode'
        type: array
    type: object
  QueryPipelineEdge:
    properties:
      from:
        type: integer
      to:
        type: integer
    type: object
  QueryPipelineNode:
    properties:
      id:
        type: integer
      metric:
        $ref: '#/definitions/QueryPipelineNodeMetric'
      name:
        type: string
      status:
        type: string
    type: object
  QueryPipelineNodeMetric:
    properties:
      processed_bytes:
        type: integer
      processing_time_ns:
        type: integer
    type: object
  QueryResult:
    properties:
      header:
        items:
          $ref: '#/definitions/Column'
        type: array
    required:
    - header
    type: object
  SQLAnalyzeColumn:
    properties:
      column:
        type: string
      column_type:
        type: string
      database:
        type: string
      is_view:
        type: boolean
      table:
        type: string
    type: object
  SQLAnalyzeResult:
    properties:
      group_by_columns:
        items:
          type: string
        type: array
      has_aggr:
        type: boolean
      has_subquery:
        type: boolean
      has_table_join:
        type: boolean
      has_union:
        type: boolean
      is_streaming:
        type: boolean
      original_query:
        type: string
      query_type:
        type: string
      required_columns:
        items:
          $ref: '#/definitions/SQLAnalyzeColumn'
        type: array
      result_columns:
        items:
          $ref: '#/definitions/SQLAnalyzeColumn'
        type: array
      rewritten_query:
        type: string
    type: object
  SavedQuery:
    properties:
      created_at:
        example: "2023-02-01 23:22:59"
        type: string
      created_by:
        $ref: '#/definitions/Owner'
      description:
        example: get the latest data from iot stream
        type: string
      id:
        example: UUID
        type: string
      last_updated_at:
        example: "2023-02-05 11:12:13"
        type: string
      last_updated_by:
        $ref: '#/definitions/Owner'
      name:
        example: streaming_iot
        type: string
      sql:
        example: select * from iot
        type: string
      tags:
        items:
          type: string
        type: array
    required:
    - description
    - id
    - name
    - sql
    - tags
    type: object
  SchemaResp:
    properties:
      content:
        example: ""
        type: string
      created_at:
        example: "2023-02-01 23:22:59"
        type: string
      created_by:
        $ref: '#/definitions/Owner'
      last_updated_at:
        example: "2023-02-05 11:12:13"
        type: string
      last_updated_by:
        $ref: '#/definitions/Owner'
      name:
        example: my_schema
        type: string
      type:
        example: Protobuf
        type: string
    type: object
  Sink:
    properties:
      created_at:
        example: "2023-02-01 23:22:59"
        type: string
      created_by:
        $ref: '#/definitions/Owner'
      description:
        example: write data to kafka
        type: string
      id:
        example: UUID
        type: string
      last_updated_at:
        example: "2023-02-05 11:12:13"
        type: string
      last_updated_by:
        $ref: '#/definitions/Owner'
      message:
        type: string
      name:
        example: write_to_kafka
        type: string
      plan:
        $ref: '#/definitions/SQLAnalyzeResult'
      properties:
        additionalProperties: {}
        type: object
      query:
        example: select * from car_live_data where speed_kmh > 100
        type: string
      status:
        example: running
        type: string
      type:
        example: kafka
        type: string
    required:
    - description
    - id
    - message
    - name
    - properties
    - query
    - status
    - type
    type: object
  SinkStat:
    properties:
      failure_count:
        type: integer
      success_count:
        type: integer
    type: object
  SinkStats:
    properties:
      earliest_event:
        example: "2023-02-01T01:02:03.456Z"
        type: string
      errors:
        description: It only contains the latest error of the pipeline
        items:
          $ref: '#/definitions/stats.Error'
        type: array
      failure_count:
        example: 1
        type: number
      historical_data_bytes:
        example: 234567
        type: integer
      latest_event:
        example: "2023-02-13T07:08:09.012Z"
        type: string
      row_count:
        example: 20
        type: integer
      streaming_data_bytes:
        example: 12345
        type: integer
      success_count:
        example: 99
        type: number
      throughput:
        description: Each data point represents the average throughput for one minute
        items:
          $ref: '#/definitions/stats.Throughput'
        type: array
    required:
    - errors
    - failure_count
    - success_count
    - throughput
    type: object
  Source:
    properties:
      created_at:
        example: "2023-02-01 23:22:59"
        type: string
      created_by:
        $ref: '#/definitions/Owner'
      description:
        example: read data from my kafka topic
        type: string
      id:
        example: source_id
        type: string
      last_updated_at:
        example: "2023-02-05 11:12:13"
        type: string
      last_updated_by:
        $ref: '#/definitions/Owner'
      message:
        type: string
      name:
        example: my_kafka_source
        type: string
      properties:
        additionalProperties: {}
        description: Additional properties of the source
        type: object
      start_time:
        description: Unix timestamp when the source get started
        example: 1680301788
        type: integer
      status:
        example: running
        type: string
      stream:
        description: The name of the target stream that this source writes to.
        example: kafka_stream
        type: string
      type:
        description: Type of the source
        example: kafka
        type: string
    required:
    - description
    - id
    - message
    - name
    - properties
    - start_time
    - status
    - stream
    - type
    type: object
  SourcePreviewRequest:
    properties:
      properties:
        additionalProperties: {}
        description: See `CreateSourceRequest`
        type: object
      size:
        description: Number of preview events, works together with `Timeout`.
        example: 1
        type: integer
      timeout:
        description: |-
          Indicates how long should preview last to fetch the desired amount of data indicated by `size`
          A duration string is a possibly signed sequence of decimal numbers, each with optional fraction and a unit suffix, such as "300ms", "-1.5h" or "2h45m". Valid time units are "ns", "us" (or "µs"), "ms", "s", "m", "h".
        example: 1m
        type: string
      type:
        description: See `CreateSourceRequest`
        example: kafka
        type: string
    required:
    - type
    type: object
  Stats:
    properties:
      errors:
        description: It only contains the latest error of the pipeline
        items:
          $ref: '#/definitions/stats.Error'
        type: array
      failure_count:
        example: 1
        type: number
      success_count:
        example: 99
        type: number
      throughput:
        description: Each data point represents the average throughput for one minute
        items:
          $ref: '#/definitions/stats.Throughput'
        type: array
    required:
    - errors
    - failure_count
    - success_count
    - throughput
    type: object
  Stream:
    properties:
      columns:
        items:
          $ref: '#/definitions/ColumnsResp'
        type: array
      created_at:
        example: "2023-02-01 23:22:59"
        type: string
      created_by:
        $ref: '#/definitions/Owner'
      description:
        example: my test stream
        type: string
      engine:
        example: Stream
        type: string
      is_external:
        description: Deprecated.
        example: false
        type: boolean
      last_updated_at:
        example: "2023-02-05 11:12:13"
        type: string
      last_updated_by:
        $ref: '#/definitions/Owner'
      logstore_retention_bytes:
        description: The max size a stream can grow. Any non-positive value means
          unlimited size.
        example: 1073741824
        type: integer
      logstore_retention_ms:
        description: The max time the data can be retained in the stream. Any non-positive
          value means unlimited time.
        example: 86400000
        type: integer
      mode:
        description: Storage mode of stream. Defaulted to `append`.
        enum:
        - append
        - changelog
        - changelog_kv
        - versioned_kv
        type: string
      name:
        example: test_stream
        type: string
      primary_key:
        description: Expression of primary key, required in `changelog_kv` and `versioned_kv`
          mode
        type: string
      ttl:
        description: Deprecated. Use `ttl_expression` instaed
        example: to_datetime(_tp_time) + INTERVAL 7 DAY
        type: string
      ttl_expression:
        description: |-
          ORDER_BY     string        `json:"order_by_expression"`
          PATTITION_BY string        `json:"partition_by_expression"`
        example: to_datetime(_tp_time) + INTERVAL 7 DAY
        type: string
    required:
    - columns
    - description
    - engine
    - logstore_retention_bytes
    - logstore_retention_ms
    - mode
    - name
    - ttl
    - ttl_expression
    type: object
  StreamDef:
    properties:
      columns:
        items:
          $ref: '#/definitions/ColumnDef'
        type: array
      description:
        example: my first stream
        type: string
      event_time_column:
        description: This column will be used as the event time if specified
        example: time
        type: string
      event_time_timezone:
        description: The timezone of the `TimestampColumn`
        example: UTC
        type: string
      logstore_retention_bytes:
        description: The max size a stream can grow. Any non-positive value means
          unlimited size. Defaulted to 10 GiB.
        example: 10737418240
        type: integer
      logstore_retention_ms:
        description: The max time the data can be retained in the stream. Any non-positive
          value means unlimited time. Defaulted to 7 days.
        example: 604800000
        type: integer
      mode:
        description: Storage mode of stream. Defaulted to `append`.
        enum:
        - append
        - changelog
        - changelog_kv
        - versioned_kv
        example: append
        type: string
      name:
        description: Stream name should only contain a maximum of 64 letters, numbers,
          or _, and start with a letter
        example: test_stream
        type: string
      order_by_expression:
        type: string
      order_by_granularity:
        type: string
      partition_by_granularity:
        type: string
      primary_key:
        description: Expression of primary key, required in `changelog_kv` and `versioned_kv`
          mode
        type: string
      replication_factor:
        type: integer
      shards:
        type: integer
      ttl_expression:
        example: to_datetime(_tp_time) + INTERVAL 7 DAY
        type: string
    required:
    - name
    type: object
  StreamMatchRequest:
    properties:
      events:
        description: The events to be matched
        items:
          $ref: '#/definitions/Event'
        type: array
    required:
    - events
    type: object
  StreamSetting:
    properties:
      key:
        type: string
      value:
        type: string
    type: object
  StreamStats:
    properties:
      earliest_event:
        example: "2023-02-01T01:02:03.456Z"
        type: string
      historical_data_bytes:
        example: 234567
        type: integer
      latest_event:
        example: "2023-02-13T07:08:09.012Z"
        type: string
      row_count:
        example: 20
        type: integer
      streaming_data_bytes:
        example: 12345
        type: integer
    type: object
  Subscription:
    properties:
      cpu:
        description: Number of milli CPUs this subscription can use at most (1 CPU
          == 1000 millicpu), nil means the limit is not set
        example: 1000
        type: integer
      customer:
        $ref: '#/definitions/Customer'
        description: The customer information (from Stripe) of the subscription.
      payment:
        $ref: '#/definitions/Payment'
        description: The payment information (from Stripe) of the subscription.
      storage_size:
        description: Size (in bytes) of the data volume
        example: 10737418240
        type: integer
      subscription_plan:
        enum:
        - Free Trial
        - Professional
        - Enterprise
        example: Free Trial
        type: string
    required:
    - storage_size
    - subscription_plan
    type: object
  TimeColumns:
    properties:
      eventTime:
        type: integer
      windowEnd:
        type: integer
      windowStart:
        type: integer
    required:
    - eventTime
    - windowEnd
    - windowStart
    type: object
  UDF:
    properties:
      arguments:
        description: |-
          The input argument of the UDF
            * For UDA: the number and type of arguments should be consistent with the main function of UDA.
              the type should be the data types of proton not javascript types. It only supports int8/16/32/64, uint8/16/32/64,
        items:
          $ref: '#/definitions/UDFArgument'
        type: array
      auth_context:
        $ref: '#/definitions/UDFAuthContext'
        description: Only valid when `type` is `remote` and `auth_method` is `auth_header`
      auth_method:
        description: |-
          Only valid when `type` is `remote`.
          This field is used to set the authentication method for remote UDF. It can be either `auth_header` or `none`.
          When `auth_header` is set, you can configure `auth_context` to specify the HTTP header that be sent the remote URL
        type: string
      created_at:
        example: "2023-02-01 23:22:59"
        type: string
      created_by:
        $ref: '#/definitions/Owner'
      description:
        example: my first UDF
        type: string
      is_aggregation:
        description: Only valid when type is 'javascript'. Whether it is an aggregation
          function.
        type: boolean
      last_updated_at:
        example: "2023-02-05 11:12:13"
        type: string
      last_updated_by:
        $ref: '#/definitions/Owner'
      name:
        example: sum_2
        type: string
      return_type:
        description: |-
          The erturn type of the UDF
            * For UDA: if it returns a single value, the return type is the corresponding data type of Timeplus.
              It supports the same types of input arguments, except for datetime, it only supports DateTime64(3).
        example: float64
        type: string
      source:
        description: |-
          Only valid when type is 'javascript'
          The source code of the UDA. There are functions to be defined:
           * main function: with the same name as UDA. Timeplus calls this function for each input row. The main function can return two types of result: object or simple data type
             - If it returns an object, the object is like {“emit”: true, “result”: …}. ‘Emit’ (boolean) property tells Timeplus whether or not the result should emit. ‘result’ is the current aggregate result, if ‘emit’ is false, the result will be ignored by Timeplus. Timeplus will convert the ‘result’ property of v8 to the data types defined when creating UDA.
             - If it returns a simple data type, Timeplus considers the return data as the result to be emitted immediately. It converts the return data to the corresponding data type and Timeplus emits the aggregating result.
             - Once UDA tells Timeplus to emit the data, UDA takes the full responsibility to clear the internal state, prepare and restart a new aggregating window, et al.
           * state function: which returns the serialized state of all internal states of UDA in string. The UDA takes the responsibility therefore Timeplus can choose to persist the internal state of UDA for query recovery.
           * init function: the input of this function is the string of serialized state of the internal states UDA. Timeplus calls this function when it wants to recover the aggregation function with the persisted internal state.
        type: string
      type:
        description: Either `javascript` or `remote`
        example: remote
        type: string
      url:
        description: Only valid when `type` is `remote`.
        example: http://mydomain.com/trigger
        type: string
    required:
    - name
    - type
    type: object
  UDFArgument:
    properties:
      name:
        example: val
        type: string
      type:
        example: float64
        type: string
    required:
    - name
    - type
    type: object
  UDFAuthContext:
    properties:
      key_name:
        type: string
      key_value:
        type: string
    type: object
  UpdateDashboardRequest:
    properties:
      description:
        type: string
      name:
        type: string
      panels:
        items:
          $ref: '#/definitions/dashboard.Panel'
        type: array
    required:
    - name
    type: object
  UpdateSourceRequest:
    properties:
      description:
        example: new description for the source
        type: string
      name:
        description: Source name should only contain a maximum of 64 letters, numbers,
          or _, and start with a letter
        example: new_source_name
        type: string
      properties:
        additionalProperties: {}
        description: Additional properties that required to read the data from source
          (e.g. broker url). Please refer to the documentation for this source type
        type: object
      stream:
        description: The name of the target stream that this source writes to. The
          stream needs to be created first.
        example: new_stream
        type: string
    type: object
  UpdateStreamRequest:
    properties:
      description:
        example: new description
        type: string
      logstore_retention_bytes:
        description: The max size a stream can grow. Any non-positive value means
          unlimited size. Defaulted to 10 GiB.
        example: 10737418240
        type: integer
      logstore_retention_ms:
        description: The max time the data can be retained in the stream. Any non-positive
          value means unlimited time. Defaulted to 7 days.
        example: 604800000
        type: integer
      ttl_expression:
        example: to_datetime(_tp_time) + INTERVAL 28 DAY
        type: string
    type: object
  UpdateViewRequest:
    properties:
      description:
        type: string
      logstore_retention_bytes:
        description: The max size a stream can grow. Any non-positive value means
          unlimited size. Defaulted to 10 GiB.
        example: 10737418240
        type: integer
      logstore_retention_ms:
        description: The max time the data can be retained in the stream. Any non-positive
          value means unlimited time. Defaulted to 7 days.
        example: 604800000
        type: integer
      query:
        type: string
      ttl_expression:
        example: to_datetime(_tp_time) + INTERVAL 28 DAY
        type: string
    type: object
  UpdateWorkspaceRequest:
    properties:
      settings:
        $ref: '#/definitions/WorkspaceSettings'
    type: object
  View:
    properties:
      columns:
        description: The columns in the view
        items:
          $ref: '#/definitions/ColumnsResp'
        type: array
      created_at:
        example: "2023-02-01 23:22:59"
        type: string
      created_by:
        $ref: '#/definitions/Owner'
      description:
        example: description for my_view
        type: string
      last_updated_at:
        example: "2023-02-05 11:12:13"
        type: string
      last_updated_by:
        $ref: '#/definitions/Owner'
      logstore_retention_bytes:
        description: Only avaialable for materialized view. The max size a materialized
          view can grow. Any non-positive value means unlimited size.
        example: 10737418240
        type: integer
      logstore_retention_ms:
        description: Only avaialable for materialized view. The max time the data
          can be retained in the materialized view. Any non-positive value means unlimited
          time.
        example: 604800000
        type: integer
      materialized:
        example: false
        type: boolean
      name:
        example: my_view
        type: string
      query:
        example: select * from car_live_data where speed_kmh > 100
        type: string
      target_stream:
        description: This field is applicable for materialized view only.
        example: high_speed_cars
        type: string
      ttl:
        description: Deprecated. Use `ttl_expression` instaed
        example: to_datetime(_tp_time) + INTERVAL 7 DAY
        type: string
      ttl_expression:
        description: Only avaialable for materialized view
        example: to_datetime(_tp_time) + INTERVAL 7 DAY
        type: string
    required:
    - columns
    - description
    - logstore_retention_bytes
    - logstore_retention_ms
    - materialized
    - name
    - query
    - target_stream
    - ttl
    - ttl_expression
    type: object
  Workspace:
    properties:
      created_at:
        example: "2023-02-01 23:22:59"
        type: string
      created_by:
        $ref: '#/definitions/Owner'
      demo_mode:
        description: Whether this is a demo worksapce
        example: false
        type: boolean
      enabled_subscription:
        description: Whether subscription feature is enabled for this workspace
        example: true
        type: boolean
      free_trial_end_date:
        description: When Free Trial ends, if applicable
        example: "2023-02-13T07:08:09.012Z"
        type: string
      id:
        example: t5abcd1e
        type: string
      last_updated_at:
        example: "2023-02-05 11:12:13"
        type: string
      last_updated_by:
        $ref: '#/definitions/Owner'
      name:
        description: Friendly name of the workspace
        example: my_workspace
        type: string
      settings:
        $ref: '#/definitions/workspace.Settings'
    required:
    - demo_mode
    - enabled_subscription
    - id
    - name
    - settings
    type: object
  WorkspaceSettings:
    properties:
      enabled_user_tracking:
        type: boolean
    type: object
  alert.Incident:
    properties:
      id:
        type: string
      status:
        type: string
      timeline:
        items:
          $ref: '#/definitions/alert.Timeline'
        type: array
    required:
    - id
    - status
    - timeline
    type: object
  alert.Timeline:
    properties:
      timestamp:
        type: integer
      type:
        type: string
    required:
    - timestamp
    - type
    type: object
  dashboard.Dashboard:
    properties:
      created_at:
        example: "2023-02-01 23:22:59"
        type: string
      created_by:
        $ref: '#/definitions/Owner'
      description:
        type: string
      id:
        type: string
      last_updated_at:
        example: "2023-02-05 11:12:13"
        type: string
      last_updated_by:
        $ref: '#/definitions/Owner'
      name:
        type: string
      panels:
        items:
          $ref: '#/definitions/dashboard.Panel'
        type: array
    required:
    - description
    - id
    - name
    - panels
    type: object
  dashboard.Panel:
    properties:
      description:
        type: string
      id:
        type: string
      position:
        additionalProperties: {}
        description: e.g. {"x":0,"y":0,"w":6,"h":2,"nextX":6,"nextY":2}
        type: object
      title:
        type: string
      viz_config:
        additionalProperties: {}
        description: |-
          The JSON configuration of the viz
          For chart, it is `{ "chart_type": "line", ...  }`
          For markdown, it is `{ "favour": "github", ...  }`
        type: object
      viz_content:
        description: |-
          For chart, the viz_content is the SQL
          For markdown, the viz_content is the markdown itself
        type: string
      viz_type:
        description: e.g. `chart`, `markdown`
        type: string
    type: object
  kafka.Common:
    properties:
      brokers:
        description: 'TODO: Shall we accept []string instead of commas split string?
          This is a breaking change so we may want to do it later'
        type: string
      dataType:
        type: string
      message:
        type: string
      password:
        type: string
      sasl:
        type: string
      schema:
        description: Protobuf-related
        type: string
      tls:
        properties:
          disable:
            type: boolean
          skipVerifyServer:
            type: boolean
        type: object
      username:
        type: string
    type: object
  keygen.License:
    properties:
      created:
        type: string
      expiry:
        type: string
      key:
        type: string
      lastValidated:
        type: string
      metadata:
        additionalProperties: true
        type: object
      name:
        type: string
      requireHeartbeat:
        type: boolean
      scheme:
        type: string
      updated:
        type: string
    type: object
  license.License:
    properties:
      created_at:
        example: "2023-02-01 23:22:59"
        type: string
      created_by:
        $ref: '#/definitions/Owner'
      data:
        $ref: '#/definitions/keygen.License'
      id:
        type: string
      is_trial:
        type: boolean
      last_updated_at:
        example: "2023-02-05 11:12:13"
        type: string
      last_updated_by:
        $ref: '#/definitions/Owner'
    required:
    - data
    - id
    type: object
  stats.Error:
    properties:
      message:
        example: failed to convert data
        type: string
      time:
        example: "2023-06-26T21:40:00Z"
        type: string
    required:
    - message
    - time
    type: object
  stats.Throughput:
    properties:
      time:
        example: "2023-06-26T21:40:00Z"
        type: string
      value:
        description: Throughput in bytes per second
        example: 25000
        type: number
    required:
    - time
    - value
    type: object
  v1beta2.CreateSchemaRequest:
    properties:
      content:
        example: ""
        type: string
      name:
        example: my_schema
        type: string
      type:
        enum:
        - Protobuf
        example: Protobuf
        type: string
    required:
    - content
    - name
    - type
    type: object
  v1beta2.ListKafkaTopicRequest:
    properties:
      properties:
        $ref: '#/definitions/kafka.Common'
    type: object
  v1beta2.UpdateSchemaRequest:
    properties:
      content:
        example: ""
        type: string
      name:
        example: my_schema
        type: string
      type:
        enum:
        - Protobuf
        example: Protobuf
        type: string
    required:
    - content
    - name
    - type
    type: object
  workspace.Settings:
    properties:
      enabled_user_tracking:
        type: boolean
    type: object
host: us.timeplus.cloud
info:
  contact:
    email: support@timeplus.com
    name: API Support
    url: https://timeplus.com
  description: Welcome to the Timeplus HTTP REST API specification.
  title: Timeplus
  version: v1
paths:
  /destroy:
    post:
      consumes:
      - application/json
      description: 'Completely delete the workspace. DANGEROUS: all data will be destroyed.'
      responses:
        "204":
          description: No Content
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: delete the current workspace
      tags:
      - Workspaces v1beta2
      x-internal: true
  /info:
    get:
      description: Get the version information of all Timeplus components.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Info'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/Info'
      security:
      - ApiKeyAuth: []
      summary: get the version information
      tags:
      - Misc
      x-internal: true
  /v1beta2/alerts:
    get:
      consumes:
      - application/json
      description: Get all alerts.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/Alert'
            type: array
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: list alerts
      tags:
      - Alerts v1beta2
    post:
      consumes:
      - application/json
      description: Create an alert. Please refer to the documentation of [alert](https://docs.timeplus.com/alert)
        for more details.
      parameters:
      - description: create alert request parameters
        in: body
        name: alert
        required: true
        schema:
          $ref: '#/definitions/CreateAlertRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/Alert'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: create an alert
      tags:
      - Alerts v1beta2
  /v1beta2/alerts/{id}:
    delete:
      consumes:
      - application/json
      description: Delete the alert with the given ID.
      parameters:
      - description: alert ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: delete an alert
      tags:
      - Alerts v1beta2
    get:
      consumes:
      - application/json
      description: Get an alert with the given ID.
      parameters:
      - description: alert ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Alert'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: get an alert
      tags:
      - Alerts v1beta2
    put:
      consumes:
      - application/json
      description: Update the specific alert with the given ID.
      parameters:
      - description: alert ID
        in: path
        name: id
        required: true
        type: string
      - description: update alert request parameters
        in: body
        name: alert
        required: true
        schema:
          $ref: '#/definitions/CreateAlertRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Alert'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: update an alert
      tags:
      - Alerts v1beta2
  /v1beta2/alerts/{id}/resolve:
    post:
      consumes:
      - application/json
      description: Manually resolve a triggered alert so that it can be triggered
        again by the trigger event in the future.
      parameters:
      - description: alert ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: resolve a triggered alert
      tags:
      - Alerts v1beta2
  /v1beta2/alerts/{id}/start:
    post:
      consumes:
      - application/json
      description: Start the alert with the given ID. If the alert is already running,
        the API does nothing and returns 204.
      parameters:
      - description: Alert ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: start an alert
      tags:
      - Alerts v1beta2
  /v1beta2/alerts/{id}/stop:
    post:
      consumes:
      - application/json
      description: Stop the alert with the given ID.
      parameters:
      - description: alert ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: stop an alert
      tags:
      - Alerts v1beta2
  /v1beta2/auth/api_keys:
    get:
      description: Get all API keys created by current user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/APIKey'
            type: array
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: list API keys
      tags:
      - API keys v1beta2
    post:
      consumes:
      - application/json
      description: |-
        Create a new API key with optional expiration,
        the created API key represents the owner thus has the same permissions as the owner
      parameters:
      - description: API Key parameters
        in: body
        name: apiKeyParam
        schema:
          $ref: '#/definitions/CreateAPIKeyRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/CreateAPIKeyResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: create an API key
      tags:
      - API keys v1beta2
  /v1beta2/auth/api_keys/{id}:
    delete:
      description: Delete the API key with the givin ID
      parameters:
      - description: API key ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: invalid ID
          schema:
            $ref: '#/definitions/ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: delete an API key
      tags:
      - API keys v1beta2
  /v1beta2/dashboards:
    get:
      consumes:
      - application/json
      description: Get all dashboards.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dashboard.Dashboard'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: list dashboards
      tags:
      - Dashboards v1beta2
    post:
      consumes:
      - application/json
      description: Create a dashboard.
      parameters:
      - description: dashboard request parameters
        in: body
        name: dashboard
        required: true
        schema:
          $ref: '#/definitions/CreateDashboardRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dashboard.Dashboard'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: create a dashboard
      tags:
      - Dashboards v1beta2
  /v1beta2/dashboards/{id}:
    delete:
      consumes:
      - application/json
      description: Delete the dashboard with the given ID.
      parameters:
      - description: dashboard ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: delete a dashboard
      tags:
      - Dashboards v1beta2
    get:
      description: get a dashboard.
      parameters:
      - description: dashboard ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dashboard.Dashboard'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: get a dashboard
      tags:
      - Dashboards v1beta2
    put:
      consumes:
      - application/json
      description: Update the specific dashboard with the given ID.
      parameters:
      - description: dashboard ID
        in: path
        name: id
        required: true
        type: string
      - description: update dashboard request parameters
        in: body
        name: source
        required: true
        schema:
          $ref: '#/definitions/UpdateDashboardRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dashboard.Dashboard'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: update a dashboard
      tags:
      - Dashboards v1beta2
  /v1beta2/external_streams:
    get:
      consumes:
      - application/json
      description: Get all external streams.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/ExternalStream'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: list external streams
      tags:
      - External streams v1beta2
    post:
      consumes:
      - application/json
      description: Create an external stream.
      parameters:
      - description: create external stream request parameters
        in: body
        name: stream
        required: true
        schema:
          $ref: '#/definitions/ExternalStreamDef'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/ExternalStreamDef'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: create an external stream
      tags:
      - External streams v1beta2
  /v1beta2/external_streams/{name}:
    delete:
      consumes:
      - application/json
      description: Delete the external stream with the given name.
      parameters:
      - description: external stream name
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: delete an external stream
      tags:
      - External streams v1beta2
    get:
      consumes:
      - application/json
      description: Get the external stream with the given name.
      parameters:
      - description: external stream name
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ExternalStream'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: get an external stream
      tags:
      - External streams v1beta2
  /v1beta2/external_tables:
    get:
      consumes:
      - application/json
      description: Get all external tables.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/ExternalTable'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: list external tables
      tags:
      - External tables v1beta2
    post:
      consumes:
      - application/json
      description: Create an external table.
      parameters:
      - description: create external table request parameters
        in: body
        name: table
        required: true
        schema:
          $ref: '#/definitions/ExternalTableDef'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/ExternalTableDef'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: create an external table
      tags:
      - External tables v1beta2
  /v1beta2/external_tables/{name}:
    delete:
      consumes:
      - application/json
      description: Delete the external table with the given name.
      parameters:
      - description: external table name
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: delete an external table
      tags:
      - External tables v1beta2
    get:
      consumes:
      - application/json
      description: Get the external table with the given name.
      parameters:
      - description: external table name
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ExternalTable'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: get an external table
      tags:
      - External tables v1beta2
  /v1beta2/format:
    post:
      consumes:
      - application/json
      description: Format the given query and make it easy to read.
      parameters:
      - description: the query SQL to be formatted
        in: body
        name: query
        required: true
        schema:
          $ref: '#/definitions/FormatQueryRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/FormatQueryResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: format a query
      tags:
      - Queries v1beta2
  /v1beta2/global-metrics:
    get:
      consumes:
      - application/json
      description: query global metrics.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/GlobalMetricsResult'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: query global metrics
      tags:
      - Metrics v1beta2
  /v1beta2/invitations:
    get:
      description: Get all invitations.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/Invitation'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: list invitations
      tags:
      - Invitations v1beta2
    post:
      consumes:
      - application/json
      description: Invite an user to the current tenant.
      parameters:
      - description: create invitation request parameters
        in: body
        name: alert
        required: true
        schema:
          $ref: '#/definitions/InvitationRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: create an invitation
      tags:
      - Invitations v1beta2
  /v1beta2/invitations/{id}:
    delete:
      description: Delete the invitation with the given ID. Deleting the invitation
        will remove the user from current workspace.
      parameters:
      - description: invitation ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "204":
          description: No Content
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: delete an invitation
      tags:
      - Invitations v1beta2
  /v1beta2/licenses:
    get:
      consumes:
      - application/json
      description: list all lcenses
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            items:
              $ref: '#/definitions/license.License'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: list all lcenses
      tags:
      - License v1beta2
    post:
      consumes:
      - application/json
      description: upload and create a lcense.
      parameters:
      - description: encryption key for license file
        in: formData
        name: key
        required: true
        type: string
      - description: license file
        in: formData
        name: file
        required: true
        type: file
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/license.License'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: upload and create a lcense
      tags:
      - License v1beta2
  /v1beta2/licenses/{id}:
    delete:
      consumes:
      - application/json
      description: remove a lcense by id
      parameters:
      - description: license ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/license.License'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: remove a lcense by id
      tags:
      - License v1beta2
    get:
      consumes:
      - application/json
      description: get a lcense by id
      parameters:
      - description: license ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/license.License'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: get a lcense by id
      tags:
      - License v1beta2
  /v1beta2/queries:
    get:
      consumes:
      - application/json
      description: Get all queries.
      parameters:
      - description: filter by tag
        in: query
        name: tag
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/Query'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: list queries
      tags:
      - Queries v1beta2
    post:
      consumes:
      - application/json
      description: |-
        Execute a query and return the results.
        * If the request fails, the response content type will be `application/json`. Please refer to the failure codes in Responses section below.
        * If the query is executed successfully, the response content type will be `text/event-stream`.
        **For SSE**
        There are 3 types of data that will be sent to SSE channel
        1. Query (type `query`): The first event of the result will ALWAYS be this type.
        2. Metrics (type `metrics`): The query metrics in JSON. They will be sent every 1 seconds.
        3. Data (the type is empty): The query result.
      parameters:
      - description: query request parameters
        in: body
        name: query
        required: true
        schema:
          $ref: '#/definitions/CreateQueryRequestV1Beta2'
      produces:
      - application/json
      - text/event-stream
      responses:
        "200":
          description: the query was successfully executed.
          schema:
            $ref: '#/definitions/Query'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: execute a query and return the results
      tags:
      - Queries v1beta2
  /v1beta2/queries/{id}:
    delete:
      consumes:
      - application/json
      description: Delete the query with the given ID.
      parameters:
      - description: query ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: delete a query
      tags:
      - Queries v1beta2
    get:
      consumes:
      - application/json
      description: Get the query with the given ID.
      parameters:
      - description: query ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Query'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: get a query
      tags:
      - Queries v1beta2
  /v1beta2/queries/{id}/cancel:
    post:
      consumes:
      - application/json
      description: Cancel the query with the given ID. If given query is not running,
        the request will do nothing. Otherwise, the query will be canceled and the
        `status` will be set to `canceled`
      parameters:
      - description: query ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: cancel a query
      tags:
      - Queries v1beta2
  /v1beta2/queries/{id}/pipeline:
    get:
      consumes:
      - application/json
      description: get the pipeline for a query
      parameters:
      - description: query ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/QueryPipeline'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: get the pipeline for a query
      tags:
      - Queries v1beta2
  /v1beta2/queries/exec:
    post:
      consumes:
      - application/json
      description: Execute a DDL query. Currently only create external stream is supported.
      parameters:
      - description: query request parameters
        in: body
        name: query
        required: true
        schema:
          $ref: '#/definitions/ExecuteQueryRequest'
      produces:
      - application/json
      responses:
        "200":
          description: the query was successfully executed.
          schema:
            $ref: '#/definitions/Query'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: execute a DDL query
      tags:
      - Queries v1beta2
      x-internal: true
  /v1beta2/savedqueries:
    get:
      description: Get all saved queries
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/SavedQuery'
            type: array
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: list Saved queries
      tags:
      - Saved queries v1beta2
    post:
      consumes:
      - application/json
      description: Create a new saved query.
      parameters:
      - description: saved query parameters
        in: body
        name: savedquery
        required: true
        schema:
          $ref: '#/definitions/CreateSavedQueryRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/SavedQuery'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: create an saved query
      tags:
      - Saved queries v1beta2
  /v1beta2/savedqueries/{id}:
    delete:
      description: Delete the saved query with the givin ID
      parameters:
      - description: saved query ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: delete a saved query
      tags:
      - Saved queries v1beta2
    get:
      description: Get a saved query.
      parameters:
      - description: saved query ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/SavedQuery'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: get a saved query
      tags:
      - Saved queries v1beta2
    put:
      consumes:
      - application/json
      description: Update the specific saved query with the given ID.
      parameters:
      - description: saved query ID
        in: path
        name: id
        required: true
        type: string
      - description: update saved query request parameters
        in: body
        name: source
        required: true
        schema:
          $ref: '#/definitions/CreateSavedQueryRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/SavedQuery'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: update a saved query
      tags:
      - Saved queries v1beta2
  /v1beta2/schemas:
    get:
      consumes:
      - application/json
      description: Get all schemas.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/SchemaResp'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: list schemas
      tags:
      - Schemas v1beta2
    post:
      consumes:
      - application/json
      description: Create a schema
      parameters:
      - description: create Schema request parameters
        in: body
        name: Schema
        required: true
        schema:
          $ref: '#/definitions/v1beta2.CreateSchemaRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/v1beta2.CreateSchemaRequest'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: create a schema
      tags:
      - Schemas v1beta2
  /v1beta2/schemas/{name}:
    delete:
      consumes:
      - application/json
      description: Delete the schema with the given name.
      parameters:
      - description: schema
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: delete a schema
      tags:
      - Schemas v1beta2
    get:
      consumes:
      - application/json
      description: get schema with the given name.
      parameters:
      - description: schema name
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/SchemaResp'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: get a schema
      tags:
      - Schemas v1beta2
    put:
      consumes:
      - application/json
      description: Update the specific schema with the given content.
      parameters:
      - description: update Schema request parameters
        in: body
        name: Schema
        required: true
        schema:
          $ref: '#/definitions/v1beta2.UpdateSchemaRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v1beta2.UpdateSchemaRequest'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: update a schema
      tags:
      - Schemas v1beta2
  /v1beta2/sinks:
    get:
      consumes:
      - application/json
      description: Get all sinks
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/Sink'
            type: array
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: list sinks
      tags:
      - Sinks v1beta2
    post:
      consumes:
      - application/json
      description: Create a sink. Please refer to the documentation of [sink](https://docs.timeplus.com/destination)
        for more details.
      parameters:
      - description: create sink request parameters
        in: body
        name: sink
        required: true
        schema:
          $ref: '#/definitions/CreateSinkRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/Sink'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: create a sink
      tags:
      - Sinks v1beta2
  /v1beta2/sinks/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a sink with the given ID.
      parameters:
      - description: sink ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: delete a sink
      tags:
      - Sinks v1beta2
    get:
      consumes:
      - application/json
      description: Get a sink with the given ID.
      parameters:
      - description: sink ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Sink'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: get a sink
      tags:
      - Sinks v1beta2
    put:
      consumes:
      - application/json
      description: Update the specific sink with the given ID.
      parameters:
      - description: sink ID
        in: path
        name: id
        required: true
        type: string
      - description: update sink request parameters
        in: body
        name: sink
        required: true
        schema:
          $ref: '#/definitions/CreateSinkRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Sink'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: update a sink
      tags:
      - Sinks v1beta2
  /v1beta2/sinks/{id}/start:
    post:
      consumes:
      - application/json
      description: Start the sink with the given ID.
      parameters:
      - description: sink ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: start a sink
      tags:
      - Sinks v1beta2
  /v1beta2/sinks/{id}/stats:
    get:
      consumes:
      - application/json
      description: Get the stats of a sink with the given id.
      parameters:
      - description: sink ID
        in: path
        name: id
        required: true
        type: string
      - example: 1d
        in: query
        name: error_log_time_range
        required: true
        type: string
      - example: 10m
        in: query
        name: metrics_time_range
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/SinkStats'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: get the stats of a sink
      tags:
      - Sinks v1beta2
  /v1beta2/sinks/{id}/stop:
    post:
      consumes:
      - application/json
      description: Stop the sink with the given ID from sending out data.
      parameters:
      - description: sink ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: stop a sink
      tags:
      - Sinks v1beta2
  /v1beta2/source/infer:
    post:
      consumes:
      - application/json
      description: This endpoint returns the inferred schema for this particular event.
        The schema can be used to create a new stream to store events like this.
      parameters:
      - description: event used to infer schema
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/EventInferRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/EventInferResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: infer schema from an existing event
      tags:
      - Sources v1beta2
      x-internal: true
  /v1beta2/source/kafka/topics:
    post:
      consumes:
      - application/json
      description: The request payload of this endpoint is the subset of the payload
        of create kafka source. Only certain `properties` is needed.
      parameters:
      - description: kakfa server properties
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/v1beta2.ListKafkaTopicRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              type: string
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: list Kafka topics
      tags:
      - Sources v1beta2
      x-internal: true
  /v1beta2/source/match:
    post:
      consumes:
      - application/json
      description: This endpoint can help you determine which stream(s) can be used
        to store those events.
      parameters:
      - description: events to match
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/StreamMatchRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              type: string
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: return streams that are compatible with provided events
      tags:
      - Sources v1beta2
      x-internal: true
  /v1beta2/source/preview:
    post:
      consumes:
      - application/json
      description: Get sample events from the source with the given ID. Please refer
        to create source for more details regarding `type` and `properties`.
      parameters:
      - description: source propeties for preview
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/SourcePreviewRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/Event'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: preview a source
      tags:
      - Sources v1beta2
  /v1beta2/sources:
    get:
      consumes:
      - application/json
      description: Get all sources.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/Source'
            type: array
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: list sources
      tags:
      - Sources v1beta2
    post:
      consumes:
      - application/json
      description: Create a source. Please refer to the documentation of [source](https://docs.timeplus.com/source)
        for more details.
      parameters:
      - description: create source request parameters
        in: body
        name: source
        required: true
        schema:
          $ref: '#/definitions/CreateSourceRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/Source'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: create a source
      tags:
      - Sources v1beta2
  /v1beta2/sources/{id}:
    delete:
      consumes:
      - application/json
      description: Delete the source with the given ID.
      parameters:
      - description: source ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: delete a source
      tags:
      - Sources v1beta2
    get:
      consumes:
      - application/json
      description: Get a source with the given ID.
      parameters:
      - description: source ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Source'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: get a source
      tags:
      - Sources v1beta2
    put:
      consumes:
      - application/json
      description: Update the specific source with the given ID. Only stopped sources
        can be updated.
      parameters:
      - description: source ID
        in: path
        name: id
        required: true
        type: string
      - description: update source request parameters
        in: body
        name: source
        required: true
        schema:
          $ref: '#/definitions/UpdateSourceRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Source'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: update a source
      tags:
      - Sources v1beta2
  /v1beta2/sources/{id}/start:
    post:
      consumes:
      - application/json
      description: Start the source with the given ID.
      parameters:
      - description: source ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: start a source
      tags:
      - Sources v1beta2
  /v1beta2/sources/{id}/stats:
    get:
      consumes:
      - application/json
      description: Get the stats of a source with the given id.
      parameters:
      - description: source ID
        in: path
        name: id
        required: true
        type: string
      - example: 1d
        in: query
        name: error_log_time_range
        required: true
        type: string
      - example: 10m
        in: query
        name: metrics_time_range
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Stats'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: get the stats of a source
      tags:
      - Sources v1beta2
  /v1beta2/sources/{id}/stop:
    post:
      consumes:
      - application/json
      description: Stop the source with the given ID.
      parameters:
      - description: source ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: stop a source
      tags:
      - Sources v1beta2
  /v1beta2/sqlanalyze:
    post:
      consumes:
      - application/json
      description: analyze sql
      parameters:
      - description: sql request parameters
        in: body
        name: query
        required: true
        schema:
          $ref: '#/definitions/AnalyzeSQLRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/SQLAnalyzeResult'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: analyze sql
      tags:
      - Queries v1beta2
  /v1beta2/streams:
    get:
      consumes:
      - application/json
      description: Get all streams.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/Stream'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: list streams
      tags:
      - Streams v1beta2
    post:
      consumes:
      - application/json
      description: Create a stream. Please refer to the documentation of [stream](https://docs.timeplus.com/working-with-streams)
        for more details.
      parameters:
      - description: create stream request parameters
        in: body
        name: stream
        required: true
        schema:
          $ref: '#/definitions/StreamDef'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/Stream'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: create a stream
      tags:
      - Streams v1beta2
  /v1beta2/streams/{name}:
    delete:
      consumes:
      - application/json
      description: Delete the stream with the given name.
      parameters:
      - description: stream name
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: delete a stream
      tags:
      - Streams v1beta2
    get:
      consumes:
      - application/json
      description: Get a stream with the given name.
      parameters:
      - description: stream name
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Stream'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: get a stream
      tags:
      - Streams v1beta2
    patch:
      consumes:
      - application/json
      description: Update the specific stream with the given name. Right now it only
        supports updating data retention-related settings. Altering stream or updating
        external stream is not supported yet.
      parameters:
      - description: name of the stream
        in: path
        name: name
        required: true
        type: string
      - description: update stream request parameters
        in: body
        name: stream
        required: true
        schema:
          $ref: '#/definitions/UpdateStreamRequest'
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
        "501":
          description: Not Implemented
      security:
      - ApiKeyAuth: []
      summary: update a stream
      tags:
      - Streams v1beta2
  /v1beta2/streams/{name}/ingest:
    post:
      consumes:
      - application/json
      - application/vnd.timeplus+json
      - application/json;format=compat
      - application/vnd.timeplus+json;format=compat
      - application/json;format=stream
      - application/vnd.timeplus+json;format=stream
      - application/x-ndjson
      - text/plain
      - text/plain;format=raw
      - text/plain;format=lines
      description: |
        Ingest data to a stream with the given name.
        For formats are supported:
        * compact JSON: when `Content-Type` is set to one of `application/json`, `application/json;format=compact`, `application/vnd.timeplus+json`, `application/vnd.timeplus+json;format=compat`, or set `format` query parameter with value `compact`. And this is the API's default format.
        * JSON stream: when `Content-Type` is set to one of `application/json;format=streaming`, `application/vnd.timeplus+json;format=streaming`, or set `format` query parameter with value `streaming`.
        * raw string: when `Content-Type` is set to one of `text/plain`, `text/plain;format=raw`, or set `format` query parameter with value `raw`.
        * string lines: when `Content-Type` is set to `text/plain;format=lines`, or set `format` query parameter with value `lines`.
        * refer to https://docs.timeplus.com/docs/ingest-api for more information *
      parameters:
      - description: stream name
        in: path
        name: name
        required: true
        type: string
      - description: ingest data
        in: body
        name: query
        required: true
        schema:
          $ref: '#/definitions/IngestData'
      - description: enfoce payload format, if it is set, it overwrite the Content-Type
          header
        enum:
        - compact
        - streaming
        - raw
        - lines
        in: query
        name: format
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: ingest data
      tags:
      - Streams v1beta2
  /v1beta2/streams/{name}/stats:
    get:
      consumes:
      - application/json
      description: Get the stats of a stream with the given name.
      parameters:
      - description: stream name
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/StreamStats'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: get the stats of a stream
      tags:
      - Streams v1beta2
  /v1beta2/subscription:
    get:
      description: Get the status of current subscription.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Subscription'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: get current subscription
      tags:
      - Subscription v1beta2
  /v1beta2/topology:
    get:
      consumes:
      - application/json
      description: Get topology graph of all existings resources.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Graph'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: get topology graph
      tags:
      - Topology v1beta2
  /v1beta2/udfs:
    get:
      consumes:
      - application/json
      description: Get all user-defined functions.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/UDF'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: list user-defined functions
      tags:
      - UDFs v1beta2
    post:
      consumes:
      - application/json
      description: Create an user-defined function.
      parameters:
      - description: create UDF request parameters
        in: body
        name: udf
        required: true
        schema:
          $ref: '#/definitions/UDF'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/UDF'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: create an user-defined function
      tags:
      - UDFs v1beta2
  /v1beta2/udfs/{name}:
    delete:
      consumes:
      - application/json
      description: Delete the user-defined function with the given name.
      parameters:
      - description: user-defined function name
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: delete an user-defined function
      tags:
      - UDFs v1beta2
    get:
      consumes:
      - application/json
      description: get the user-defined function with the given name.
      parameters:
      - description: user-defined function name
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/UDF'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: get an user-defined function
      tags:
      - UDFs v1beta2
    put:
      consumes:
      - application/json
      description: Update the specific user-defined function with the given name.
      parameters:
      - description: update UDF request parameters
        in: body
        name: udf
        required: true
        schema:
          $ref: '#/definitions/UDF'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/UDF'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: update an user-defined function
      tags:
      - UDFs v1beta2
  /v1beta2/views:
    get:
      consumes:
      - application/json
      description: Get all views.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/View'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: list views
      tags:
      - Views v1beta2
    post:
      consumes:
      - application/json
      description: Create a view. There are two different types of the view, please
        refer to the documentation of [view](https://docs.timeplus.com/view) for more
        details.
      parameters:
      - description: create view request parameters
        in: body
        name: view
        required: true
        schema:
          $ref: '#/definitions/CreateViewRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/View'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: create a view
      tags:
      - Views v1beta2
  /v1beta2/views/{name}:
    delete:
      consumes:
      - application/json
      description: Delete the view with the given name.
      parameters:
      - description: view name
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: delete a view
      tags:
      - Views v1beta2
    get:
      consumes:
      - application/json
      description: Get a view with the given name.
      parameters:
      - description: view name
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/View'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: get a view
      tags:
      - Views v1beta2
    patch:
      consumes:
      - application/json
      description: Update the specific view with the given name. Updating the query
        of a materialized view is not allowed
      parameters:
      - description: name of the view
        in: path
        name: name
        required: true
        type: string
      - description: update view request parameters
        in: body
        name: view
        required: true
        schema:
          $ref: '#/definitions/UpdateViewRequest'
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: update a view
      tags:
      - Views v1beta2
  /v1beta2/views/{name}/stats:
    get:
      consumes:
      - application/json
      description: Get the stats of a view with the given name.
      parameters:
      - description: view name
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/StreamStats'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: get the stats of a view
      tags:
      - Views v1beta2
  /v1beta2/workspace:
    get:
      description: Get the basic information about the current workspace.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Workspace'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: get current workspace
      tags:
      - Workspace v1beta2
    patch:
      description: Update the settings of current workspace
      parameters:
      - description: update workspace request parameters
        in: body
        name: workspace
        required: true
        schema:
          $ref: '#/definitions/UpdateWorkspaceRequest'
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: update current workspace
      tags:
      - Workspace v1beta2
securityDefinitions:
  ApiKeyAuth:
    description: use API keys created via the CreateAPIKey API to authorize API access.
    in: header
    name: X-Api-Key
    type: apiKey
swagger: "2.0"
