# coding: utf-8

"""
    Timeplus

    Welcome to the Timeplus HTTP REST API specification.  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->  # noqa: E501

    OpenAPI spec version: 1.0.0-oas3
    Contact: support@timeplus.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DashboardPanel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'description': 'str',
        'id': 'str',
        'position': 'dict(str, object)',
        'title': 'str',
        'viz_config': 'dict(str, object)',
        'viz_content': 'str',
        'viz_type': 'str'
    }

    attribute_map = {
        'description': 'description',
        'id': 'id',
        'position': 'position',
        'title': 'title',
        'viz_config': 'viz_config',
        'viz_content': 'viz_content',
        'viz_type': 'viz_type'
    }

    def __init__(self, description=None, id=None, position=None, title=None, viz_config=None, viz_content=None, viz_type=None):  # noqa: E501
        """DashboardPanel - a model defined in Swagger"""  # noqa: E501
        self._description = None
        self._id = None
        self._position = None
        self._title = None
        self._viz_config = None
        self._viz_content = None
        self._viz_type = None
        self.discriminator = None
        if description is not None:
            self.description = description
        if id is not None:
            self.id = id
        if position is not None:
            self.position = position
        if title is not None:
            self.title = title
        if viz_config is not None:
            self.viz_config = viz_config
        if viz_content is not None:
            self.viz_content = viz_content
        if viz_type is not None:
            self.viz_type = viz_type

    @property
    def description(self):
        """Gets the description of this DashboardPanel.  # noqa: E501


        :return: The description of this DashboardPanel.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this DashboardPanel.


        :param description: The description of this DashboardPanel.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def id(self):
        """Gets the id of this DashboardPanel.  # noqa: E501


        :return: The id of this DashboardPanel.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DashboardPanel.


        :param id: The id of this DashboardPanel.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def position(self):
        """Gets the position of this DashboardPanel.  # noqa: E501

        e.g. {\"x\":0,\"y\":0,\"w\":6,\"h\":2,\"nextX\":6,\"nextY\":2}  # noqa: E501

        :return: The position of this DashboardPanel.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this DashboardPanel.

        e.g. {\"x\":0,\"y\":0,\"w\":6,\"h\":2,\"nextX\":6,\"nextY\":2}  # noqa: E501

        :param position: The position of this DashboardPanel.  # noqa: E501
        :type: dict(str, object)
        """

        self._position = position

    @property
    def title(self):
        """Gets the title of this DashboardPanel.  # noqa: E501


        :return: The title of this DashboardPanel.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this DashboardPanel.


        :param title: The title of this DashboardPanel.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def viz_config(self):
        """Gets the viz_config of this DashboardPanel.  # noqa: E501

        The JSON configuration of the viz For chart, it is `{ \"chart_type\": \"line\", ...  }` For markdown, it is `{ \"favour\": \"github\", ...  }`  # noqa: E501

        :return: The viz_config of this DashboardPanel.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._viz_config

    @viz_config.setter
    def viz_config(self, viz_config):
        """Sets the viz_config of this DashboardPanel.

        The JSON configuration of the viz For chart, it is `{ \"chart_type\": \"line\", ...  }` For markdown, it is `{ \"favour\": \"github\", ...  }`  # noqa: E501

        :param viz_config: The viz_config of this DashboardPanel.  # noqa: E501
        :type: dict(str, object)
        """

        self._viz_config = viz_config

    @property
    def viz_content(self):
        """Gets the viz_content of this DashboardPanel.  # noqa: E501

        For chart, the viz_content is the SQL For markdown, the viz_content is the markdown itself  # noqa: E501

        :return: The viz_content of this DashboardPanel.  # noqa: E501
        :rtype: str
        """
        return self._viz_content

    @viz_content.setter
    def viz_content(self, viz_content):
        """Sets the viz_content of this DashboardPanel.

        For chart, the viz_content is the SQL For markdown, the viz_content is the markdown itself  # noqa: E501

        :param viz_content: The viz_content of this DashboardPanel.  # noqa: E501
        :type: str
        """

        self._viz_content = viz_content

    @property
    def viz_type(self):
        """Gets the viz_type of this DashboardPanel.  # noqa: E501

        e.g. `chart`, `markdown`  # noqa: E501

        :return: The viz_type of this DashboardPanel.  # noqa: E501
        :rtype: str
        """
        return self._viz_type

    @viz_type.setter
    def viz_type(self, viz_type):
        """Sets the viz_type of this DashboardPanel.

        e.g. `chart`, `markdown`  # noqa: E501

        :param viz_type: The viz_type of this DashboardPanel.  # noqa: E501
        :type: str
        """

        self._viz_type = viz_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DashboardPanel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DashboardPanel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
