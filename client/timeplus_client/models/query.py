# coding: utf-8

"""
    Timeplus

    Welcome to the Timeplus HTTP REST API specification.  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->  # noqa: E501

    OpenAPI spec version: 1.0.0-oas3
    Contact: support@timeplus.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Query(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'analysis': 'QueryAnalysis',
        'created_at': 'str',
        'created_by': 'Owner',
        'description': 'str',
        'duration': 'int',
        'end_time': 'int',
        'id': 'str',
        'last_updated_at': 'str',
        'last_updated_by': 'Owner',
        'message': 'str',
        'name': 'str',
        'response_time': 'int',
        'result': 'QueryResult',
        'sinks': 'dict(str, SinkStat)',
        'sql': 'str',
        'start_time': 'int',
        'status': 'str',
        'tags': 'list[str]',
        'time_columns': 'TimeColumns'
    }

    attribute_map = {
        'analysis': 'analysis',
        'created_at': 'created_at',
        'created_by': 'created_by',
        'description': 'description',
        'duration': 'duration',
        'end_time': 'end_time',
        'id': 'id',
        'last_updated_at': 'last_updated_at',
        'last_updated_by': 'last_updated_by',
        'message': 'message',
        'name': 'name',
        'response_time': 'response_time',
        'result': 'result',
        'sinks': 'sinks',
        'sql': 'sql',
        'start_time': 'start_time',
        'status': 'status',
        'tags': 'tags',
        'time_columns': 'timeColumns'
    }

    def __init__(self, analysis=None, created_at=None, created_by=None, description=None, duration=None, end_time=None, id=None, last_updated_at=None, last_updated_by=None, message=None, name=None, response_time=None, result=None, sinks=None, sql=None, start_time=None, status=None, tags=None, time_columns=None):  # noqa: E501
        """Query - a model defined in Swagger"""  # noqa: E501
        self._analysis = None
        self._created_at = None
        self._created_by = None
        self._description = None
        self._duration = None
        self._end_time = None
        self._id = None
        self._last_updated_at = None
        self._last_updated_by = None
        self._message = None
        self._name = None
        self._response_time = None
        self._result = None
        self._sinks = None
        self._sql = None
        self._start_time = None
        self._status = None
        self._tags = None
        self._time_columns = None
        self.discriminator = None
        self.analysis = analysis
        if created_at is not None:
            self.created_at = created_at
        if created_by is not None:
            self.created_by = created_by
        if description is not None:
            self.description = description
        self.duration = duration
        self.end_time = end_time
        self.id = id
        if last_updated_at is not None:
            self.last_updated_at = last_updated_at
        if last_updated_by is not None:
            self.last_updated_by = last_updated_by
        self.message = message
        if name is not None:
            self.name = name
        self.response_time = response_time
        self.result = result
        self.sinks = sinks
        self.sql = sql
        self.start_time = start_time
        self.status = status
        if tags is not None:
            self.tags = tags
        self.time_columns = time_columns

    @property
    def analysis(self):
        """Gets the analysis of this Query.  # noqa: E501


        :return: The analysis of this Query.  # noqa: E501
        :rtype: QueryAnalysis
        """
        return self._analysis

    @analysis.setter
    def analysis(self, analysis):
        """Sets the analysis of this Query.


        :param analysis: The analysis of this Query.  # noqa: E501
        :type: QueryAnalysis
        """
        if analysis is None:
            raise ValueError("Invalid value for `analysis`, must not be `None`")  # noqa: E501

        self._analysis = analysis

    @property
    def created_at(self):
        """Gets the created_at of this Query.  # noqa: E501


        :return: The created_at of this Query.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Query.


        :param created_at: The created_at of this Query.  # noqa: E501
        :type: str
        """

        self._created_at = created_at

    @property
    def created_by(self):
        """Gets the created_by of this Query.  # noqa: E501


        :return: The created_by of this Query.  # noqa: E501
        :rtype: Owner
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this Query.


        :param created_by: The created_by of this Query.  # noqa: E501
        :type: Owner
        """

        self._created_by = created_by

    @property
    def description(self):
        """Gets the description of this Query.  # noqa: E501


        :return: The description of this Query.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Query.


        :param description: The description of this Query.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def duration(self):
        """Gets the duration of this Query.  # noqa: E501


        :return: The duration of this Query.  # noqa: E501
        :rtype: int
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this Query.


        :param duration: The duration of this Query.  # noqa: E501
        :type: int
        """
        if duration is None:
            raise ValueError("Invalid value for `duration`, must not be `None`")  # noqa: E501

        self._duration = duration

    @property
    def end_time(self):
        """Gets the end_time of this Query.  # noqa: E501


        :return: The end_time of this Query.  # noqa: E501
        :rtype: int
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this Query.


        :param end_time: The end_time of this Query.  # noqa: E501
        :type: int
        """
        if end_time is None:
            raise ValueError("Invalid value for `end_time`, must not be `None`")  # noqa: E501

        self._end_time = end_time

    @property
    def id(self):
        """Gets the id of this Query.  # noqa: E501


        :return: The id of this Query.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Query.


        :param id: The id of this Query.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def last_updated_at(self):
        """Gets the last_updated_at of this Query.  # noqa: E501


        :return: The last_updated_at of this Query.  # noqa: E501
        :rtype: str
        """
        return self._last_updated_at

    @last_updated_at.setter
    def last_updated_at(self, last_updated_at):
        """Sets the last_updated_at of this Query.


        :param last_updated_at: The last_updated_at of this Query.  # noqa: E501
        :type: str
        """

        self._last_updated_at = last_updated_at

    @property
    def last_updated_by(self):
        """Gets the last_updated_by of this Query.  # noqa: E501


        :return: The last_updated_by of this Query.  # noqa: E501
        :rtype: Owner
        """
        return self._last_updated_by

    @last_updated_by.setter
    def last_updated_by(self, last_updated_by):
        """Sets the last_updated_by of this Query.


        :param last_updated_by: The last_updated_by of this Query.  # noqa: E501
        :type: Owner
        """

        self._last_updated_by = last_updated_by

    @property
    def message(self):
        """Gets the message of this Query.  # noqa: E501


        :return: The message of this Query.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this Query.


        :param message: The message of this Query.  # noqa: E501
        :type: str
        """
        if message is None:
            raise ValueError("Invalid value for `message`, must not be `None`")  # noqa: E501

        self._message = message

    @property
    def name(self):
        """Gets the name of this Query.  # noqa: E501


        :return: The name of this Query.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Query.


        :param name: The name of this Query.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def response_time(self):
        """Gets the response_time of this Query.  # noqa: E501


        :return: The response_time of this Query.  # noqa: E501
        :rtype: int
        """
        return self._response_time

    @response_time.setter
    def response_time(self, response_time):
        """Sets the response_time of this Query.


        :param response_time: The response_time of this Query.  # noqa: E501
        :type: int
        """
        if response_time is None:
            raise ValueError("Invalid value for `response_time`, must not be `None`")  # noqa: E501

        self._response_time = response_time

    @property
    def result(self):
        """Gets the result of this Query.  # noqa: E501


        :return: The result of this Query.  # noqa: E501
        :rtype: QueryResult
        """
        return self._result

    @result.setter
    def result(self, result):
        """Sets the result of this Query.


        :param result: The result of this Query.  # noqa: E501
        :type: QueryResult
        """
        if result is None:
            raise ValueError("Invalid value for `result`, must not be `None`")  # noqa: E501

        self._result = result

    @property
    def sinks(self):
        """Gets the sinks of this Query.  # noqa: E501


        :return: The sinks of this Query.  # noqa: E501
        :rtype: dict(str, SinkStat)
        """
        return self._sinks

    @sinks.setter
    def sinks(self, sinks):
        """Sets the sinks of this Query.


        :param sinks: The sinks of this Query.  # noqa: E501
        :type: dict(str, SinkStat)
        """
        if sinks is None:
            raise ValueError("Invalid value for `sinks`, must not be `None`")  # noqa: E501

        self._sinks = sinks

    @property
    def sql(self):
        """Gets the sql of this Query.  # noqa: E501


        :return: The sql of this Query.  # noqa: E501
        :rtype: str
        """
        return self._sql

    @sql.setter
    def sql(self, sql):
        """Sets the sql of this Query.


        :param sql: The sql of this Query.  # noqa: E501
        :type: str
        """
        if sql is None:
            raise ValueError("Invalid value for `sql`, must not be `None`")  # noqa: E501

        self._sql = sql

    @property
    def start_time(self):
        """Gets the start_time of this Query.  # noqa: E501


        :return: The start_time of this Query.  # noqa: E501
        :rtype: int
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this Query.


        :param start_time: The start_time of this Query.  # noqa: E501
        :type: int
        """
        if start_time is None:
            raise ValueError("Invalid value for `start_time`, must not be `None`")  # noqa: E501

        self._start_time = start_time

    @property
    def status(self):
        """Gets the status of this Query.  # noqa: E501


        :return: The status of this Query.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Query.


        :param status: The status of this Query.  # noqa: E501
        :type: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    @property
    def tags(self):
        """Gets the tags of this Query.  # noqa: E501


        :return: The tags of this Query.  # noqa: E501
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this Query.


        :param tags: The tags of this Query.  # noqa: E501
        :type: list[str]
        """

        self._tags = tags

    @property
    def time_columns(self):
        """Gets the time_columns of this Query.  # noqa: E501


        :return: The time_columns of this Query.  # noqa: E501
        :rtype: TimeColumns
        """
        return self._time_columns

    @time_columns.setter
    def time_columns(self, time_columns):
        """Sets the time_columns of this Query.


        :param time_columns: The time_columns of this Query.  # noqa: E501
        :type: TimeColumns
        """
        if time_columns is None:
            raise ValueError("Invalid value for `time_columns`, must not be `None`")  # noqa: E501

        self._time_columns = time_columns

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Query, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Query):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
