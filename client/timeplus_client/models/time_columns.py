# coding: utf-8

"""
    Timeplus

    Welcome to the Timeplus HTTP REST API specification.  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->  # noqa: E501

    OpenAPI spec version: 1.0.0-oas3
    Contact: support@timeplus.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TimeColumns(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'event_time': 'int',
        'index_time': 'int',
        'window_end': 'int',
        'window_start': 'int'
    }

    attribute_map = {
        'event_time': 'eventTime',
        'index_time': 'indexTime',
        'window_end': 'windowEnd',
        'window_start': 'windowStart'
    }

    def __init__(self, event_time=None, index_time=None, window_end=None, window_start=None):  # noqa: E501
        """TimeColumns - a model defined in Swagger"""  # noqa: E501
        self._event_time = None
        self._index_time = None
        self._window_end = None
        self._window_start = None
        self.discriminator = None
        self.event_time = event_time
        self.index_time = index_time
        self.window_end = window_end
        self.window_start = window_start

    @property
    def event_time(self):
        """Gets the event_time of this TimeColumns.  # noqa: E501


        :return: The event_time of this TimeColumns.  # noqa: E501
        :rtype: int
        """
        return self._event_time

    @event_time.setter
    def event_time(self, event_time):
        """Sets the event_time of this TimeColumns.


        :param event_time: The event_time of this TimeColumns.  # noqa: E501
        :type: int
        """
        if event_time is None:
            raise ValueError("Invalid value for `event_time`, must not be `None`")  # noqa: E501

        self._event_time = event_time

    @property
    def index_time(self):
        """Gets the index_time of this TimeColumns.  # noqa: E501


        :return: The index_time of this TimeColumns.  # noqa: E501
        :rtype: int
        """
        return self._index_time

    @index_time.setter
    def index_time(self, index_time):
        """Sets the index_time of this TimeColumns.


        :param index_time: The index_time of this TimeColumns.  # noqa: E501
        :type: int
        """
        if index_time is None:
            raise ValueError("Invalid value for `index_time`, must not be `None`")  # noqa: E501

        self._index_time = index_time

    @property
    def window_end(self):
        """Gets the window_end of this TimeColumns.  # noqa: E501


        :return: The window_end of this TimeColumns.  # noqa: E501
        :rtype: int
        """
        return self._window_end

    @window_end.setter
    def window_end(self, window_end):
        """Sets the window_end of this TimeColumns.


        :param window_end: The window_end of this TimeColumns.  # noqa: E501
        :type: int
        """
        if window_end is None:
            raise ValueError("Invalid value for `window_end`, must not be `None`")  # noqa: E501

        self._window_end = window_end

    @property
    def window_start(self):
        """Gets the window_start of this TimeColumns.  # noqa: E501


        :return: The window_start of this TimeColumns.  # noqa: E501
        :rtype: int
        """
        return self._window_start

    @window_start.setter
    def window_start(self, window_start):
        """Sets the window_start of this TimeColumns.


        :param window_start: The window_start of this TimeColumns.  # noqa: E501
        :type: int
        """
        if window_start is None:
            raise ValueError("Invalid value for `window_start`, must not be `None`")  # noqa: E501

        self._window_start = window_start

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TimeColumns, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TimeColumns):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
