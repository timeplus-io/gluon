# coding: utf-8

"""
    Timeplus

    Welcome to the Timeplus HTTP REST API specification.  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->  # noqa: E501

    OpenAPI spec version: 1.0.0-oas3
    Contact: support@timeplus.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DashboardDashboard(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'created_at': 'str',
        'created_by': 'Owner',
        'description': 'str',
        'id': 'str',
        'last_updated_at': 'str',
        'last_updated_by': 'Owner',
        'name': 'str',
        'panels': 'list[DashboardPanel]'
    }

    attribute_map = {
        'created_at': 'created_at',
        'created_by': 'created_by',
        'description': 'description',
        'id': 'id',
        'last_updated_at': 'last_updated_at',
        'last_updated_by': 'last_updated_by',
        'name': 'name',
        'panels': 'panels'
    }

    def __init__(self, created_at=None, created_by=None, description=None, id=None, last_updated_at=None, last_updated_by=None, name=None, panels=None):  # noqa: E501
        """DashboardDashboard - a model defined in Swagger"""  # noqa: E501
        self._created_at = None
        self._created_by = None
        self._description = None
        self._id = None
        self._last_updated_at = None
        self._last_updated_by = None
        self._name = None
        self._panels = None
        self.discriminator = None
        if created_at is not None:
            self.created_at = created_at
        if created_by is not None:
            self.created_by = created_by
        self.description = description
        self.id = id
        if last_updated_at is not None:
            self.last_updated_at = last_updated_at
        if last_updated_by is not None:
            self.last_updated_by = last_updated_by
        self.name = name
        self.panels = panels

    @property
    def created_at(self):
        """Gets the created_at of this DashboardDashboard.  # noqa: E501


        :return: The created_at of this DashboardDashboard.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this DashboardDashboard.


        :param created_at: The created_at of this DashboardDashboard.  # noqa: E501
        :type: str
        """

        self._created_at = created_at

    @property
    def created_by(self):
        """Gets the created_by of this DashboardDashboard.  # noqa: E501


        :return: The created_by of this DashboardDashboard.  # noqa: E501
        :rtype: Owner
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this DashboardDashboard.


        :param created_by: The created_by of this DashboardDashboard.  # noqa: E501
        :type: Owner
        """

        self._created_by = created_by

    @property
    def description(self):
        """Gets the description of this DashboardDashboard.  # noqa: E501


        :return: The description of this DashboardDashboard.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this DashboardDashboard.


        :param description: The description of this DashboardDashboard.  # noqa: E501
        :type: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def id(self):
        """Gets the id of this DashboardDashboard.  # noqa: E501


        :return: The id of this DashboardDashboard.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DashboardDashboard.


        :param id: The id of this DashboardDashboard.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def last_updated_at(self):
        """Gets the last_updated_at of this DashboardDashboard.  # noqa: E501


        :return: The last_updated_at of this DashboardDashboard.  # noqa: E501
        :rtype: str
        """
        return self._last_updated_at

    @last_updated_at.setter
    def last_updated_at(self, last_updated_at):
        """Sets the last_updated_at of this DashboardDashboard.


        :param last_updated_at: The last_updated_at of this DashboardDashboard.  # noqa: E501
        :type: str
        """

        self._last_updated_at = last_updated_at

    @property
    def last_updated_by(self):
        """Gets the last_updated_by of this DashboardDashboard.  # noqa: E501


        :return: The last_updated_by of this DashboardDashboard.  # noqa: E501
        :rtype: Owner
        """
        return self._last_updated_by

    @last_updated_by.setter
    def last_updated_by(self, last_updated_by):
        """Sets the last_updated_by of this DashboardDashboard.


        :param last_updated_by: The last_updated_by of this DashboardDashboard.  # noqa: E501
        :type: Owner
        """

        self._last_updated_by = last_updated_by

    @property
    def name(self):
        """Gets the name of this DashboardDashboard.  # noqa: E501


        :return: The name of this DashboardDashboard.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DashboardDashboard.


        :param name: The name of this DashboardDashboard.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def panels(self):
        """Gets the panels of this DashboardDashboard.  # noqa: E501


        :return: The panels of this DashboardDashboard.  # noqa: E501
        :rtype: list[DashboardPanel]
        """
        return self._panels

    @panels.setter
    def panels(self, panels):
        """Sets the panels of this DashboardDashboard.


        :param panels: The panels of this DashboardDashboard.  # noqa: E501
        :type: list[DashboardPanel]
        """
        if panels is None:
            raise ValueError("Invalid value for `panels`, must not be `None`")  # noqa: E501

        self._panels = panels

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DashboardDashboard, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DashboardDashboard):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
