# coding: utf-8

"""
    Timeplus

    Welcome to the Timeplus HTTP REST API specification.  # noqa: E501

    OpenAPI spec version: v1
    Contact: support@timeplus.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Info(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'axion': 'Build',
        'neutron': 'Build',
        'orbit': 'Build',
        'product_name': 'str',
        'proton': 'Build'
    }

    attribute_map = {
        'axion': 'axion',
        'neutron': 'neutron',
        'orbit': 'orbit',
        'product_name': 'product_name',
        'proton': 'proton'
    }

    def __init__(self, axion=None, neutron=None, orbit=None, product_name=None, proton=None):  # noqa: E501
        """Info - a model defined in Swagger"""  # noqa: E501
        self._axion = None
        self._neutron = None
        self._orbit = None
        self._product_name = None
        self._proton = None
        self.discriminator = None
        self.axion = axion
        self.neutron = neutron
        self.orbit = orbit
        self.product_name = product_name
        self.proton = proton

    @property
    def axion(self):
        """Gets the axion of this Info.  # noqa: E501


        :return: The axion of this Info.  # noqa: E501
        :rtype: Build
        """
        return self._axion

    @axion.setter
    def axion(self, axion):
        """Sets the axion of this Info.


        :param axion: The axion of this Info.  # noqa: E501
        :type: Build
        """
        if axion is None:
            raise ValueError("Invalid value for `axion`, must not be `None`")  # noqa: E501

        self._axion = axion

    @property
    def neutron(self):
        """Gets the neutron of this Info.  # noqa: E501


        :return: The neutron of this Info.  # noqa: E501
        :rtype: Build
        """
        return self._neutron

    @neutron.setter
    def neutron(self, neutron):
        """Sets the neutron of this Info.


        :param neutron: The neutron of this Info.  # noqa: E501
        :type: Build
        """
        if neutron is None:
            raise ValueError("Invalid value for `neutron`, must not be `None`")  # noqa: E501

        self._neutron = neutron

    @property
    def orbit(self):
        """Gets the orbit of this Info.  # noqa: E501


        :return: The orbit of this Info.  # noqa: E501
        :rtype: Build
        """
        return self._orbit

    @orbit.setter
    def orbit(self, orbit):
        """Sets the orbit of this Info.


        :param orbit: The orbit of this Info.  # noqa: E501
        :type: Build
        """
        if orbit is None:
            raise ValueError("Invalid value for `orbit`, must not be `None`")  # noqa: E501

        self._orbit = orbit

    @property
    def product_name(self):
        """Gets the product_name of this Info.  # noqa: E501


        :return: The product_name of this Info.  # noqa: E501
        :rtype: str
        """
        return self._product_name

    @product_name.setter
    def product_name(self, product_name):
        """Sets the product_name of this Info.


        :param product_name: The product_name of this Info.  # noqa: E501
        :type: str
        """
        if product_name is None:
            raise ValueError("Invalid value for `product_name`, must not be `None`")  # noqa: E501

        self._product_name = product_name

    @property
    def proton(self):
        """Gets the proton of this Info.  # noqa: E501


        :return: The proton of this Info.  # noqa: E501
        :rtype: Build
        """
        return self._proton

    @proton.setter
    def proton(self, proton):
        """Sets the proton of this Info.


        :param proton: The proton of this Info.  # noqa: E501
        :type: Build
        """
        if proton is None:
            raise ValueError("Invalid value for `proton`, must not be `None`")  # noqa: E501

        self._proton = proton

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Info, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Info):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
