# coding: utf-8

"""
    Timeplus

    Welcome to the Timeplus HTTP REST API specification.  # noqa: E501

    OpenAPI spec version: v1
    Contact: support@timeplus.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Alert(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'action': 'str',
        'created_at': 'str',
        'created_by': 'Owner',
        'description': 'str',
        'id': 'str',
        'instance': 'AlertIncident',
        'last_updated_at': 'str',
        'last_updated_by': 'Owner',
        'message': 'str',
        'name': 'str',
        'properties': 'dict(str, object)',
        'resolve_query': 'Query',
        'resolve_sql': 'str',
        'severity': 'int',
        'status': 'str',
        'trigger_query': 'Query',
        'trigger_sql': 'str'
    }

    attribute_map = {
        'action': 'action',
        'created_at': 'created_at',
        'created_by': 'created_by',
        'description': 'description',
        'id': 'id',
        'instance': 'instance',
        'last_updated_at': 'last_updated_at',
        'last_updated_by': 'last_updated_by',
        'message': 'message',
        'name': 'name',
        'properties': 'properties',
        'resolve_query': 'resolve_query',
        'resolve_sql': 'resolve_sql',
        'severity': 'severity',
        'status': 'status',
        'trigger_query': 'trigger_query',
        'trigger_sql': 'trigger_sql'
    }

    def __init__(self, action=None, created_at=None, created_by=None, description=None, id=None, instance=None, last_updated_at=None, last_updated_by=None, message=None, name=None, properties=None, resolve_query=None, resolve_sql=None, severity=None, status=None, trigger_query=None, trigger_sql=None):  # noqa: E501
        """Alert - a model defined in Swagger"""  # noqa: E501
        self._action = None
        self._created_at = None
        self._created_by = None
        self._description = None
        self._id = None
        self._instance = None
        self._last_updated_at = None
        self._last_updated_by = None
        self._message = None
        self._name = None
        self._properties = None
        self._resolve_query = None
        self._resolve_sql = None
        self._severity = None
        self._status = None
        self._trigger_query = None
        self._trigger_sql = None
        self.discriminator = None
        self.action = action
        if created_at is not None:
            self.created_at = created_at
        if created_by is not None:
            self.created_by = created_by
        self.description = description
        self.id = id
        self.instance = instance
        if last_updated_at is not None:
            self.last_updated_at = last_updated_at
        if last_updated_by is not None:
            self.last_updated_by = last_updated_by
        self.message = message
        self.name = name
        self.properties = properties
        self.resolve_query = resolve_query
        if resolve_sql is not None:
            self.resolve_sql = resolve_sql
        self.severity = severity
        self.status = status
        self.trigger_query = trigger_query
        self.trigger_sql = trigger_sql

    @property
    def action(self):
        """Gets the action of this Alert.  # noqa: E501


        :return: The action of this Alert.  # noqa: E501
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this Alert.


        :param action: The action of this Alert.  # noqa: E501
        :type: str
        """
        if action is None:
            raise ValueError("Invalid value for `action`, must not be `None`")  # noqa: E501

        self._action = action

    @property
    def created_at(self):
        """Gets the created_at of this Alert.  # noqa: E501


        :return: The created_at of this Alert.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Alert.


        :param created_at: The created_at of this Alert.  # noqa: E501
        :type: str
        """

        self._created_at = created_at

    @property
    def created_by(self):
        """Gets the created_by of this Alert.  # noqa: E501


        :return: The created_by of this Alert.  # noqa: E501
        :rtype: Owner
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this Alert.


        :param created_by: The created_by of this Alert.  # noqa: E501
        :type: Owner
        """

        self._created_by = created_by

    @property
    def description(self):
        """Gets the description of this Alert.  # noqa: E501


        :return: The description of this Alert.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Alert.


        :param description: The description of this Alert.  # noqa: E501
        :type: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def id(self):
        """Gets the id of this Alert.  # noqa: E501


        :return: The id of this Alert.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Alert.


        :param id: The id of this Alert.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def instance(self):
        """Gets the instance of this Alert.  # noqa: E501


        :return: The instance of this Alert.  # noqa: E501
        :rtype: AlertIncident
        """
        return self._instance

    @instance.setter
    def instance(self, instance):
        """Sets the instance of this Alert.


        :param instance: The instance of this Alert.  # noqa: E501
        :type: AlertIncident
        """
        if instance is None:
            raise ValueError("Invalid value for `instance`, must not be `None`")  # noqa: E501

        self._instance = instance

    @property
    def last_updated_at(self):
        """Gets the last_updated_at of this Alert.  # noqa: E501


        :return: The last_updated_at of this Alert.  # noqa: E501
        :rtype: str
        """
        return self._last_updated_at

    @last_updated_at.setter
    def last_updated_at(self, last_updated_at):
        """Sets the last_updated_at of this Alert.


        :param last_updated_at: The last_updated_at of this Alert.  # noqa: E501
        :type: str
        """

        self._last_updated_at = last_updated_at

    @property
    def last_updated_by(self):
        """Gets the last_updated_by of this Alert.  # noqa: E501


        :return: The last_updated_by of this Alert.  # noqa: E501
        :rtype: Owner
        """
        return self._last_updated_by

    @last_updated_by.setter
    def last_updated_by(self, last_updated_by):
        """Sets the last_updated_by of this Alert.


        :param last_updated_by: The last_updated_by of this Alert.  # noqa: E501
        :type: Owner
        """

        self._last_updated_by = last_updated_by

    @property
    def message(self):
        """Gets the message of this Alert.  # noqa: E501


        :return: The message of this Alert.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this Alert.


        :param message: The message of this Alert.  # noqa: E501
        :type: str
        """
        if message is None:
            raise ValueError("Invalid value for `message`, must not be `None`")  # noqa: E501

        self._message = message

    @property
    def name(self):
        """Gets the name of this Alert.  # noqa: E501


        :return: The name of this Alert.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Alert.


        :param name: The name of this Alert.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def properties(self):
        """Gets the properties of this Alert.  # noqa: E501


        :return: The properties of this Alert.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this Alert.


        :param properties: The properties of this Alert.  # noqa: E501
        :type: dict(str, object)
        """
        if properties is None:
            raise ValueError("Invalid value for `properties`, must not be `None`")  # noqa: E501

        self._properties = properties

    @property
    def resolve_query(self):
        """Gets the resolve_query of this Alert.  # noqa: E501


        :return: The resolve_query of this Alert.  # noqa: E501
        :rtype: Query
        """
        return self._resolve_query

    @resolve_query.setter
    def resolve_query(self, resolve_query):
        """Sets the resolve_query of this Alert.


        :param resolve_query: The resolve_query of this Alert.  # noqa: E501
        :type: Query
        """
        # if resolve_query is None:
        #     raise ValueError("Invalid value for `resolve_query`, must not be `None`")  # noqa: E501

        self._resolve_query = resolve_query

    @property
    def resolve_sql(self):
        """Gets the resolve_sql of this Alert.  # noqa: E501


        :return: The resolve_sql of this Alert.  # noqa: E501
        :rtype: str
        """
        return self._resolve_sql

    @resolve_sql.setter
    def resolve_sql(self, resolve_sql):
        """Sets the resolve_sql of this Alert.


        :param resolve_sql: The resolve_sql of this Alert.  # noqa: E501
        :type: str
        """

        self._resolve_sql = resolve_sql

    @property
    def severity(self):
        """Gets the severity of this Alert.  # noqa: E501


        :return: The severity of this Alert.  # noqa: E501
        :rtype: int
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """Sets the severity of this Alert.


        :param severity: The severity of this Alert.  # noqa: E501
        :type: int
        """
        if severity is None:
            raise ValueError("Invalid value for `severity`, must not be `None`")  # noqa: E501

        self._severity = severity

    @property
    def status(self):
        """Gets the status of this Alert.  # noqa: E501


        :return: The status of this Alert.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Alert.


        :param status: The status of this Alert.  # noqa: E501
        :type: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    @property
    def trigger_query(self):
        """Gets the trigger_query of this Alert.  # noqa: E501


        :return: The trigger_query of this Alert.  # noqa: E501
        :rtype: Query
        """
        return self._trigger_query

    @trigger_query.setter
    def trigger_query(self, trigger_query):
        """Sets the trigger_query of this Alert.


        :param trigger_query: The trigger_query of this Alert.  # noqa: E501
        :type: Query
        """
        # if trigger_query is None:
        #     raise ValueError("Invalid value for `trigger_query`, must not be `None`")  # noqa: E501

        self._trigger_query = trigger_query

    @property
    def trigger_sql(self):
        """Gets the trigger_sql of this Alert.  # noqa: E501


        :return: The trigger_sql of this Alert.  # noqa: E501
        :rtype: str
        """
        return self._trigger_sql

    @trigger_sql.setter
    def trigger_sql(self, trigger_sql):
        """Sets the trigger_sql of this Alert.


        :param trigger_sql: The trigger_sql of this Alert.  # noqa: E501
        :type: str
        """
        if trigger_sql is None:
            raise ValueError("Invalid value for `trigger_sql`, must not be `None`")  # noqa: E501

        self._trigger_sql = trigger_sql

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Alert, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Alert):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
