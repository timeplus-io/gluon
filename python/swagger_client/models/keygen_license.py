# coding: utf-8

"""
    Timeplus

    Welcome to the Timeplus HTTP REST API specification.  # noqa: E501

    OpenAPI spec version: v1
    Contact: support@timeplus.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class KeygenLicense(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'created': 'str',
        'expiry': 'str',
        'key': 'str',
        'last_validated': 'str',
        'metadata': 'object',
        'name': 'str',
        'require_heartbeat': 'bool',
        'scheme': 'str',
        'updated': 'str'
    }

    attribute_map = {
        'created': 'created',
        'expiry': 'expiry',
        'key': 'key',
        'last_validated': 'lastValidated',
        'metadata': 'metadata',
        'name': 'name',
        'require_heartbeat': 'requireHeartbeat',
        'scheme': 'scheme',
        'updated': 'updated'
    }

    def __init__(self, created=None, expiry=None, key=None, last_validated=None, metadata=None, name=None, require_heartbeat=None, scheme=None, updated=None):  # noqa: E501
        """KeygenLicense - a model defined in Swagger"""  # noqa: E501
        self._created = None
        self._expiry = None
        self._key = None
        self._last_validated = None
        self._metadata = None
        self._name = None
        self._require_heartbeat = None
        self._scheme = None
        self._updated = None
        self.discriminator = None
        if created is not None:
            self.created = created
        if expiry is not None:
            self.expiry = expiry
        if key is not None:
            self.key = key
        if last_validated is not None:
            self.last_validated = last_validated
        if metadata is not None:
            self.metadata = metadata
        if name is not None:
            self.name = name
        if require_heartbeat is not None:
            self.require_heartbeat = require_heartbeat
        if scheme is not None:
            self.scheme = scheme
        if updated is not None:
            self.updated = updated

    @property
    def created(self):
        """Gets the created of this KeygenLicense.  # noqa: E501


        :return: The created of this KeygenLicense.  # noqa: E501
        :rtype: str
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this KeygenLicense.


        :param created: The created of this KeygenLicense.  # noqa: E501
        :type: str
        """

        self._created = created

    @property
    def expiry(self):
        """Gets the expiry of this KeygenLicense.  # noqa: E501


        :return: The expiry of this KeygenLicense.  # noqa: E501
        :rtype: str
        """
        return self._expiry

    @expiry.setter
    def expiry(self, expiry):
        """Sets the expiry of this KeygenLicense.


        :param expiry: The expiry of this KeygenLicense.  # noqa: E501
        :type: str
        """

        self._expiry = expiry

    @property
    def key(self):
        """Gets the key of this KeygenLicense.  # noqa: E501


        :return: The key of this KeygenLicense.  # noqa: E501
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this KeygenLicense.


        :param key: The key of this KeygenLicense.  # noqa: E501
        :type: str
        """

        self._key = key

    @property
    def last_validated(self):
        """Gets the last_validated of this KeygenLicense.  # noqa: E501


        :return: The last_validated of this KeygenLicense.  # noqa: E501
        :rtype: str
        """
        return self._last_validated

    @last_validated.setter
    def last_validated(self, last_validated):
        """Sets the last_validated of this KeygenLicense.


        :param last_validated: The last_validated of this KeygenLicense.  # noqa: E501
        :type: str
        """

        self._last_validated = last_validated

    @property
    def metadata(self):
        """Gets the metadata of this KeygenLicense.  # noqa: E501


        :return: The metadata of this KeygenLicense.  # noqa: E501
        :rtype: object
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this KeygenLicense.


        :param metadata: The metadata of this KeygenLicense.  # noqa: E501
        :type: object
        """

        self._metadata = metadata

    @property
    def name(self):
        """Gets the name of this KeygenLicense.  # noqa: E501


        :return: The name of this KeygenLicense.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this KeygenLicense.


        :param name: The name of this KeygenLicense.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def require_heartbeat(self):
        """Gets the require_heartbeat of this KeygenLicense.  # noqa: E501


        :return: The require_heartbeat of this KeygenLicense.  # noqa: E501
        :rtype: bool
        """
        return self._require_heartbeat

    @require_heartbeat.setter
    def require_heartbeat(self, require_heartbeat):
        """Sets the require_heartbeat of this KeygenLicense.


        :param require_heartbeat: The require_heartbeat of this KeygenLicense.  # noqa: E501
        :type: bool
        """

        self._require_heartbeat = require_heartbeat

    @property
    def scheme(self):
        """Gets the scheme of this KeygenLicense.  # noqa: E501


        :return: The scheme of this KeygenLicense.  # noqa: E501
        :rtype: str
        """
        return self._scheme

    @scheme.setter
    def scheme(self, scheme):
        """Sets the scheme of this KeygenLicense.


        :param scheme: The scheme of this KeygenLicense.  # noqa: E501
        :type: str
        """

        self._scheme = scheme

    @property
    def updated(self):
        """Gets the updated of this KeygenLicense.  # noqa: E501


        :return: The updated of this KeygenLicense.  # noqa: E501
        :rtype: str
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this KeygenLicense.


        :param updated: The updated of this KeygenLicense.  # noqa: E501
        :type: str
        """

        self._updated = updated

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(KeygenLicense, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, KeygenLicense):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
