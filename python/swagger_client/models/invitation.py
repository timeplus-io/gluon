# coding: utf-8

"""
    Timeplus

    Welcome to the Timeplus HTTP REST API specification.  # noqa: E501

    OpenAPI spec version: v1
    Contact: support@timeplus.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Invitation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'created_at': 'str',
        'created_by': 'Owner',
        'email': 'str',
        'id': 'str',
        'last_updated_at': 'str',
        'last_updated_by': 'Owner',
        'status': 'str',
        'user_id': 'str'
    }

    attribute_map = {
        'created_at': 'created_at',
        'created_by': 'created_by',
        'email': 'email',
        'id': 'id',
        'last_updated_at': 'last_updated_at',
        'last_updated_by': 'last_updated_by',
        'status': 'status',
        'user_id': 'user_id'
    }

    def __init__(self, created_at=None, created_by=None, email=None, id=None, last_updated_at=None, last_updated_by=None, status=None, user_id=None):  # noqa: E501
        """Invitation - a model defined in Swagger"""  # noqa: E501
        self._created_at = None
        self._created_by = None
        self._email = None
        self._id = None
        self._last_updated_at = None
        self._last_updated_by = None
        self._status = None
        self._user_id = None
        self.discriminator = None
        if created_at is not None:
            self.created_at = created_at
        if created_by is not None:
            self.created_by = created_by
        self.email = email
        self.id = id
        if last_updated_at is not None:
            self.last_updated_at = last_updated_at
        if last_updated_by is not None:
            self.last_updated_by = last_updated_by
        self.status = status
        self.user_id = user_id

    @property
    def created_at(self):
        """Gets the created_at of this Invitation.  # noqa: E501


        :return: The created_at of this Invitation.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Invitation.


        :param created_at: The created_at of this Invitation.  # noqa: E501
        :type: str
        """

        self._created_at = created_at

    @property
    def created_by(self):
        """Gets the created_by of this Invitation.  # noqa: E501


        :return: The created_by of this Invitation.  # noqa: E501
        :rtype: Owner
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this Invitation.


        :param created_by: The created_by of this Invitation.  # noqa: E501
        :type: Owner
        """

        self._created_by = created_by

    @property
    def email(self):
        """Gets the email of this Invitation.  # noqa: E501

        The email address of the invited user.  # noqa: E501

        :return: The email of this Invitation.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this Invitation.

        The email address of the invited user.  # noqa: E501

        :param email: The email of this Invitation.  # noqa: E501
        :type: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")  # noqa: E501

        self._email = email

    @property
    def id(self):
        """Gets the id of this Invitation.  # noqa: E501


        :return: The id of this Invitation.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Invitation.


        :param id: The id of this Invitation.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def last_updated_at(self):
        """Gets the last_updated_at of this Invitation.  # noqa: E501


        :return: The last_updated_at of this Invitation.  # noqa: E501
        :rtype: str
        """
        return self._last_updated_at

    @last_updated_at.setter
    def last_updated_at(self, last_updated_at):
        """Sets the last_updated_at of this Invitation.


        :param last_updated_at: The last_updated_at of this Invitation.  # noqa: E501
        :type: str
        """

        self._last_updated_at = last_updated_at

    @property
    def last_updated_by(self):
        """Gets the last_updated_by of this Invitation.  # noqa: E501


        :return: The last_updated_by of this Invitation.  # noqa: E501
        :rtype: Owner
        """
        return self._last_updated_by

    @last_updated_by.setter
    def last_updated_by(self, last_updated_by):
        """Sets the last_updated_by of this Invitation.


        :param last_updated_by: The last_updated_by of this Invitation.  # noqa: E501
        :type: Owner
        """

        self._last_updated_by = last_updated_by

    @property
    def status(self):
        """Gets the status of this Invitation.  # noqa: E501


        :return: The status of this Invitation.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Invitation.


        :param status: The status of this Invitation.  # noqa: E501
        :type: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501
        allowed_values = ["pending", "accepted"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def user_id(self):
        """Gets the user_id of this Invitation.  # noqa: E501

        The user id of the invited user. It is empty when the `status` is `pending`.  # noqa: E501

        :return: The user_id of this Invitation.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this Invitation.

        The user id of the invited user. It is empty when the `status` is `pending`.  # noqa: E501

        :param user_id: The user_id of this Invitation.  # noqa: E501
        :type: str
        """
        if user_id is None:
            raise ValueError("Invalid value for `user_id`, must not be `None`")  # noqa: E501

        self._user_id = user_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Invitation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Invitation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
