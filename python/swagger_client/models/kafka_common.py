# coding: utf-8

"""
    Timeplus

    Welcome to the Timeplus HTTP REST API specification.  # noqa: E501

    OpenAPI spec version: v1
    Contact: support@timeplus.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class KafkaCommon(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'brokers': 'str',
        'data_type': 'str',
        'message': 'str',
        'password': 'str',
        'sasl': 'str',
        'schema': 'str',
        'tls': 'KafkaCommonTls',
        'username': 'str'
    }

    attribute_map = {
        'brokers': 'brokers',
        'data_type': 'dataType',
        'message': 'message',
        'password': 'password',
        'sasl': 'sasl',
        'schema': 'schema',
        'tls': 'tls',
        'username': 'username'
    }

    def __init__(self, brokers=None, data_type=None, message=None, password=None, sasl=None, schema=None, tls=None, username=None):  # noqa: E501
        """KafkaCommon - a model defined in Swagger"""  # noqa: E501
        self._brokers = None
        self._data_type = None
        self._message = None
        self._password = None
        self._sasl = None
        self._schema = None
        self._tls = None
        self._username = None
        self.discriminator = None
        if brokers is not None:
            self.brokers = brokers
        if data_type is not None:
            self.data_type = data_type
        if message is not None:
            self.message = message
        if password is not None:
            self.password = password
        if sasl is not None:
            self.sasl = sasl
        if schema is not None:
            self.schema = schema
        if tls is not None:
            self.tls = tls
        if username is not None:
            self.username = username

    @property
    def brokers(self):
        """Gets the brokers of this KafkaCommon.  # noqa: E501

        TODO: Shall we accept []string instead of commas split string? This is a breaking change so we may want to do it later  # noqa: E501

        :return: The brokers of this KafkaCommon.  # noqa: E501
        :rtype: str
        """
        return self._brokers

    @brokers.setter
    def brokers(self, brokers):
        """Sets the brokers of this KafkaCommon.

        TODO: Shall we accept []string instead of commas split string? This is a breaking change so we may want to do it later  # noqa: E501

        :param brokers: The brokers of this KafkaCommon.  # noqa: E501
        :type: str
        """

        self._brokers = brokers

    @property
    def data_type(self):
        """Gets the data_type of this KafkaCommon.  # noqa: E501


        :return: The data_type of this KafkaCommon.  # noqa: E501
        :rtype: str
        """
        return self._data_type

    @data_type.setter
    def data_type(self, data_type):
        """Sets the data_type of this KafkaCommon.


        :param data_type: The data_type of this KafkaCommon.  # noqa: E501
        :type: str
        """

        self._data_type = data_type

    @property
    def message(self):
        """Gets the message of this KafkaCommon.  # noqa: E501


        :return: The message of this KafkaCommon.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this KafkaCommon.


        :param message: The message of this KafkaCommon.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def password(self):
        """Gets the password of this KafkaCommon.  # noqa: E501


        :return: The password of this KafkaCommon.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this KafkaCommon.


        :param password: The password of this KafkaCommon.  # noqa: E501
        :type: str
        """

        self._password = password

    @property
    def sasl(self):
        """Gets the sasl of this KafkaCommon.  # noqa: E501


        :return: The sasl of this KafkaCommon.  # noqa: E501
        :rtype: str
        """
        return self._sasl

    @sasl.setter
    def sasl(self, sasl):
        """Sets the sasl of this KafkaCommon.


        :param sasl: The sasl of this KafkaCommon.  # noqa: E501
        :type: str
        """

        self._sasl = sasl

    @property
    def schema(self):
        """Gets the schema of this KafkaCommon.  # noqa: E501

        Protobuf-related  # noqa: E501

        :return: The schema of this KafkaCommon.  # noqa: E501
        :rtype: str
        """
        return self._schema

    @schema.setter
    def schema(self, schema):
        """Sets the schema of this KafkaCommon.

        Protobuf-related  # noqa: E501

        :param schema: The schema of this KafkaCommon.  # noqa: E501
        :type: str
        """

        self._schema = schema

    @property
    def tls(self):
        """Gets the tls of this KafkaCommon.  # noqa: E501


        :return: The tls of this KafkaCommon.  # noqa: E501
        :rtype: KafkaCommonTls
        """
        return self._tls

    @tls.setter
    def tls(self, tls):
        """Sets the tls of this KafkaCommon.


        :param tls: The tls of this KafkaCommon.  # noqa: E501
        :type: KafkaCommonTls
        """

        self._tls = tls

    @property
    def username(self):
        """Gets the username of this KafkaCommon.  # noqa: E501


        :return: The username of this KafkaCommon.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this KafkaCommon.


        :param username: The username of this KafkaCommon.  # noqa: E501
        :type: str
        """

        self._username = username

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(KafkaCommon, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, KafkaCommon):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
