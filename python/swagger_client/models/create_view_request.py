# coding: utf-8

"""
    Timeplus

    Welcome to the Timeplus HTTP REST API specification.  # noqa: E501

    OpenAPI spec version: v1
    Contact: support@timeplus.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CreateViewRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'description': 'str',
        'logstore_retention_bytes': 'int',
        'logstore_retention_ms': 'int',
        'materialized': 'bool',
        'name': 'str',
        'query': 'str',
        'target_stream': 'str',
        'ttl_expression': 'str'
    }

    attribute_map = {
        'description': 'description',
        'logstore_retention_bytes': 'logstore_retention_bytes',
        'logstore_retention_ms': 'logstore_retention_ms',
        'materialized': 'materialized',
        'name': 'name',
        'query': 'query',
        'target_stream': 'target_stream',
        'ttl_expression': 'ttl_expression'
    }

    def __init__(self, description=None, logstore_retention_bytes=None, logstore_retention_ms=None, materialized=False, name=None, query=None, target_stream=None, ttl_expression=None):  # noqa: E501
        """CreateViewRequest - a model defined in Swagger"""  # noqa: E501
        self._description = None
        self._logstore_retention_bytes = None
        self._logstore_retention_ms = None
        self._materialized = None
        self._name = None
        self._query = None
        self._target_stream = None
        self._ttl_expression = None
        self.discriminator = None
        if description is not None:
            self.description = description
        if logstore_retention_bytes is not None:
            self.logstore_retention_bytes = logstore_retention_bytes
        if logstore_retention_ms is not None:
            self.logstore_retention_ms = logstore_retention_ms
        if materialized is not None:
            self.materialized = materialized
        self.name = name
        self.query = query
        if target_stream is not None:
            self.target_stream = target_stream
        if ttl_expression is not None:
            self.ttl_expression = ttl_expression

    @property
    def description(self):
        """Gets the description of this CreateViewRequest.  # noqa: E501


        :return: The description of this CreateViewRequest.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CreateViewRequest.


        :param description: The description of this CreateViewRequest.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def logstore_retention_bytes(self):
        """Gets the logstore_retention_bytes of this CreateViewRequest.  # noqa: E501

        The max size a stream can grow. Any non-positive value means unlimited size. Defaulted to 10 GiB.  # noqa: E501

        :return: The logstore_retention_bytes of this CreateViewRequest.  # noqa: E501
        :rtype: int
        """
        return self._logstore_retention_bytes

    @logstore_retention_bytes.setter
    def logstore_retention_bytes(self, logstore_retention_bytes):
        """Sets the logstore_retention_bytes of this CreateViewRequest.

        The max size a stream can grow. Any non-positive value means unlimited size. Defaulted to 10 GiB.  # noqa: E501

        :param logstore_retention_bytes: The logstore_retention_bytes of this CreateViewRequest.  # noqa: E501
        :type: int
        """

        self._logstore_retention_bytes = logstore_retention_bytes

    @property
    def logstore_retention_ms(self):
        """Gets the logstore_retention_ms of this CreateViewRequest.  # noqa: E501

        The max time the data can be retained in the stream. Any non-positive value means unlimited time. Defaulted to 7 days.  # noqa: E501

        :return: The logstore_retention_ms of this CreateViewRequest.  # noqa: E501
        :rtype: int
        """
        return self._logstore_retention_ms

    @logstore_retention_ms.setter
    def logstore_retention_ms(self, logstore_retention_ms):
        """Sets the logstore_retention_ms of this CreateViewRequest.

        The max time the data can be retained in the stream. Any non-positive value means unlimited time. Defaulted to 7 days.  # noqa: E501

        :param logstore_retention_ms: The logstore_retention_ms of this CreateViewRequest.  # noqa: E501
        :type: int
        """

        self._logstore_retention_ms = logstore_retention_ms

    @property
    def materialized(self):
        """Gets the materialized of this CreateViewRequest.  # noqa: E501


        :return: The materialized of this CreateViewRequest.  # noqa: E501
        :rtype: bool
        """
        return self._materialized

    @materialized.setter
    def materialized(self, materialized):
        """Sets the materialized of this CreateViewRequest.


        :param materialized: The materialized of this CreateViewRequest.  # noqa: E501
        :type: bool
        """

        self._materialized = materialized

    @property
    def name(self):
        """Gets the name of this CreateViewRequest.  # noqa: E501

        View name should only contain a maximum of 64 letters, numbers, or _, and start with a letter  # noqa: E501

        :return: The name of this CreateViewRequest.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateViewRequest.

        View name should only contain a maximum of 64 letters, numbers, or _, and start with a letter  # noqa: E501

        :param name: The name of this CreateViewRequest.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def query(self):
        """Gets the query of this CreateViewRequest.  # noqa: E501


        :return: The query of this CreateViewRequest.  # noqa: E501
        :rtype: str
        """
        return self._query

    @query.setter
    def query(self, query):
        """Sets the query of this CreateViewRequest.


        :param query: The query of this CreateViewRequest.  # noqa: E501
        :type: str
        """
        if query is None:
            raise ValueError("Invalid value for `query`, must not be `None`")  # noqa: E501

        self._query = query

    @property
    def target_stream(self):
        """Gets the target_stream of this CreateViewRequest.  # noqa: E501

        This option is applicable only when `materialized` is `true`. Specify this when you want to have multiple materialized views sink to the same target stream.  # noqa: E501

        :return: The target_stream of this CreateViewRequest.  # noqa: E501
        :rtype: str
        """
        return self._target_stream

    @target_stream.setter
    def target_stream(self, target_stream):
        """Sets the target_stream of this CreateViewRequest.

        This option is applicable only when `materialized` is `true`. Specify this when you want to have multiple materialized views sink to the same target stream.  # noqa: E501

        :param target_stream: The target_stream of this CreateViewRequest.  # noqa: E501
        :type: str
        """

        self._target_stream = target_stream

    @property
    def ttl_expression(self):
        """Gets the ttl_expression of this CreateViewRequest.  # noqa: E501


        :return: The ttl_expression of this CreateViewRequest.  # noqa: E501
        :rtype: str
        """
        return self._ttl_expression

    @ttl_expression.setter
    def ttl_expression(self, ttl_expression):
        """Sets the ttl_expression of this CreateViewRequest.


        :param ttl_expression: The ttl_expression of this CreateViewRequest.  # noqa: E501
        :type: str
        """

        self._ttl_expression = ttl_expression

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreateViewRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateViewRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
