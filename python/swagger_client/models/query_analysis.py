# coding: utf-8

"""
    Timeplus

    Welcome to the Timeplus HTTP REST API specification.  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->  # noqa: E501

    OpenAPI spec version: 1.0.0-oas3
    Contact: support@timeplus.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class QueryAnalysis(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'has_aggr': 'bool',
        'has_subquery': 'bool',
        'has_table_join': 'bool',
        'has_union': 'bool',
        'is_streaming': 'bool'
    }

    attribute_map = {
        'has_aggr': 'has_aggr',
        'has_subquery': 'has_subquery',
        'has_table_join': 'has_table_join',
        'has_union': 'has_union',
        'is_streaming': 'is_streaming'
    }

    def __init__(self, has_aggr=None, has_subquery=None, has_table_join=None, has_union=None, is_streaming=None):  # noqa: E501
        """QueryAnalysis - a model defined in Swagger"""  # noqa: E501
        self._has_aggr = None
        self._has_subquery = None
        self._has_table_join = None
        self._has_union = None
        self._is_streaming = None
        self.discriminator = None
        self.has_aggr = has_aggr
        self.has_subquery = has_subquery
        self.has_table_join = has_table_join
        self.has_union = has_union
        self.is_streaming = is_streaming

    @property
    def has_aggr(self):
        """Gets the has_aggr of this QueryAnalysis.  # noqa: E501


        :return: The has_aggr of this QueryAnalysis.  # noqa: E501
        :rtype: bool
        """
        return self._has_aggr

    @has_aggr.setter
    def has_aggr(self, has_aggr):
        """Sets the has_aggr of this QueryAnalysis.


        :param has_aggr: The has_aggr of this QueryAnalysis.  # noqa: E501
        :type: bool
        """
        if has_aggr is None:
            raise ValueError("Invalid value for `has_aggr`, must not be `None`")  # noqa: E501

        self._has_aggr = has_aggr

    @property
    def has_subquery(self):
        """Gets the has_subquery of this QueryAnalysis.  # noqa: E501


        :return: The has_subquery of this QueryAnalysis.  # noqa: E501
        :rtype: bool
        """
        return self._has_subquery

    @has_subquery.setter
    def has_subquery(self, has_subquery):
        """Sets the has_subquery of this QueryAnalysis.


        :param has_subquery: The has_subquery of this QueryAnalysis.  # noqa: E501
        :type: bool
        """
        if has_subquery is None:
            raise ValueError("Invalid value for `has_subquery`, must not be `None`")  # noqa: E501

        self._has_subquery = has_subquery

    @property
    def has_table_join(self):
        """Gets the has_table_join of this QueryAnalysis.  # noqa: E501


        :return: The has_table_join of this QueryAnalysis.  # noqa: E501
        :rtype: bool
        """
        return self._has_table_join

    @has_table_join.setter
    def has_table_join(self, has_table_join):
        """Sets the has_table_join of this QueryAnalysis.


        :param has_table_join: The has_table_join of this QueryAnalysis.  # noqa: E501
        :type: bool
        """
        if has_table_join is None:
            raise ValueError("Invalid value for `has_table_join`, must not be `None`")  # noqa: E501

        self._has_table_join = has_table_join

    @property
    def has_union(self):
        """Gets the has_union of this QueryAnalysis.  # noqa: E501


        :return: The has_union of this QueryAnalysis.  # noqa: E501
        :rtype: bool
        """
        return self._has_union

    @has_union.setter
    def has_union(self, has_union):
        """Sets the has_union of this QueryAnalysis.


        :param has_union: The has_union of this QueryAnalysis.  # noqa: E501
        :type: bool
        """
        if has_union is None:
            raise ValueError("Invalid value for `has_union`, must not be `None`")  # noqa: E501

        self._has_union = has_union

    @property
    def is_streaming(self):
        """Gets the is_streaming of this QueryAnalysis.  # noqa: E501


        :return: The is_streaming of this QueryAnalysis.  # noqa: E501
        :rtype: bool
        """
        return self._is_streaming

    @is_streaming.setter
    def is_streaming(self, is_streaming):
        """Sets the is_streaming of this QueryAnalysis.


        :param is_streaming: The is_streaming of this QueryAnalysis.  # noqa: E501
        :type: bool
        """
        if is_streaming is None:
            raise ValueError("Invalid value for `is_streaming`, must not be `None`")  # noqa: E501

        self._is_streaming = is_streaming

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(QueryAnalysis, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, QueryAnalysis):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
